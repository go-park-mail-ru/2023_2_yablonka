// Code generated by MockGen. DO NOT EDIT.
// Source: P:\VK Образование\Web\Sem_2\Project\2023_2_yablonka\internal\storage\task.go
//
// Generated by this command:
//
//	mockgen.exe --source=P:\VK Образование\Web\Sem_2\Project\2023_2_yablonka\internal\storage\task.go --destination=./mocks/mock_storage/task.go --package=mock_storage
//
// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"
	dto "server/internal/pkg/dto"
	entities "server/internal/pkg/entities"

	gomock "go.uber.org/mock/gomock"
)

// MockITaskStorage is a mock of ITaskStorage interface.
type MockITaskStorage struct {
	ctrl     *gomock.Controller
	recorder *MockITaskStorageMockRecorder
}

// MockITaskStorageMockRecorder is the mock recorder for MockITaskStorage.
type MockITaskStorageMockRecorder struct {
	mock *MockITaskStorage
}

// NewMockITaskStorage creates a new mock instance.
func NewMockITaskStorage(ctrl *gomock.Controller) *MockITaskStorage {
	mock := &MockITaskStorage{ctrl: ctrl}
	mock.recorder = &MockITaskStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITaskStorage) EXPECT() *MockITaskStorageMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockITaskStorage) AddUser(arg0 context.Context, arg1 dto.AddTaskUserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockITaskStorageMockRecorder) AddUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockITaskStorage)(nil).AddUser), arg0, arg1)
}

// AttachFile mocks base method.
func (m *MockITaskStorage) AttachFile(arg0 context.Context, arg1 dto.AttachedFileInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachFile indicates an expected call of AttachFile.
func (mr *MockITaskStorageMockRecorder) AttachFile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachFile", reflect.TypeOf((*MockITaskStorage)(nil).AttachFile), arg0, arg1)
}

// CheckAccess mocks base method.
func (m *MockITaskStorage) CheckAccess(arg0 context.Context, arg1 dto.CheckTaskAccessInfo) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAccess", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAccess indicates an expected call of CheckAccess.
func (mr *MockITaskStorageMockRecorder) CheckAccess(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAccess", reflect.TypeOf((*MockITaskStorage)(nil).CheckAccess), arg0, arg1)
}

// Create mocks base method.
func (m *MockITaskStorage) Create(arg0 context.Context, arg1 dto.NewTaskInfo) (*entities.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*entities.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockITaskStorageMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITaskStorage)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockITaskStorage) Delete(arg0 context.Context, arg1 dto.TaskID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockITaskStorageMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockITaskStorage)(nil).Delete), arg0, arg1)
}

// GetFileList mocks base method.
func (m *MockITaskStorage) GetFileList(arg0 context.Context, arg1 dto.TaskID) (*[]dto.AttachedFileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileList", arg0, arg1)
	ret0, _ := ret[0].(*[]dto.AttachedFileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileList indicates an expected call of GetFileList.
func (mr *MockITaskStorageMockRecorder) GetFileList(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileList", reflect.TypeOf((*MockITaskStorage)(nil).GetFileList), arg0, arg1)
}

// Move mocks base method.
func (m *MockITaskStorage) Move(arg0 context.Context, arg1 dto.TaskMoveInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Move", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Move indicates an expected call of Move.
func (mr *MockITaskStorageMockRecorder) Move(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Move", reflect.TypeOf((*MockITaskStorage)(nil).Move), arg0, arg1)
}

// Read mocks base method.
func (m *MockITaskStorage) Read(arg0 context.Context, arg1 dto.TaskID) (*dto.SingleTaskInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(*dto.SingleTaskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockITaskStorageMockRecorder) Read(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockITaskStorage)(nil).Read), arg0, arg1)
}

// ReadMany mocks base method.
func (m *MockITaskStorage) ReadMany(arg0 context.Context, arg1 dto.TaskIDs) (*[]dto.SingleTaskInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMany", arg0, arg1)
	ret0, _ := ret[0].(*[]dto.SingleTaskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMany indicates an expected call of ReadMany.
func (mr *MockITaskStorageMockRecorder) ReadMany(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMany", reflect.TypeOf((*MockITaskStorage)(nil).ReadMany), arg0, arg1)
}

// RemoveFile mocks base method.
func (m *MockITaskStorage) RemoveFile(arg0 context.Context, arg1 dto.RemoveFileInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFile indicates an expected call of RemoveFile.
func (mr *MockITaskStorageMockRecorder) RemoveFile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFile", reflect.TypeOf((*MockITaskStorage)(nil).RemoveFile), arg0, arg1)
}

// RemoveUser mocks base method.
func (m *MockITaskStorage) RemoveUser(arg0 context.Context, arg1 dto.RemoveTaskUserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUser indicates an expected call of RemoveUser.
func (mr *MockITaskStorageMockRecorder) RemoveUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockITaskStorage)(nil).RemoveUser), arg0, arg1)
}

// Update mocks base method.
func (m *MockITaskStorage) Update(arg0 context.Context, arg1 dto.UpdatedTaskInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockITaskStorageMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockITaskStorage)(nil).Update), arg0, arg1)
}
