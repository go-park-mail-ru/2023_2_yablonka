// Code generated by MockGen. DO NOT EDIT.
// Source: checklist.go
//
// Generated by this command:
//
//	mockgen -source=checklist.go -destination=../../mocks/mock_storage/checklist.go -package=mock_storage
//
// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"
	dto "server/internal/pkg/dto"

	gomock "go.uber.org/mock/gomock"
)

// MockIChecklistStorage is a mock of IChecklistStorage interface.
type MockIChecklistStorage struct {
	ctrl     *gomock.Controller
	recorder *MockIChecklistStorageMockRecorder
}

// MockIChecklistStorageMockRecorder is the mock recorder for MockIChecklistStorage.
type MockIChecklistStorageMockRecorder struct {
	mock *MockIChecklistStorage
}

// NewMockIChecklistStorage creates a new mock instance.
func NewMockIChecklistStorage(ctrl *gomock.Controller) *MockIChecklistStorage {
	mock := &MockIChecklistStorage{ctrl: ctrl}
	mock.recorder = &MockIChecklistStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIChecklistStorage) EXPECT() *MockIChecklistStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIChecklistStorage) Create(arg0 context.Context, arg1 dto.NewChecklistInfo) (*dto.ChecklistInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*dto.ChecklistInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIChecklistStorageMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIChecklistStorage)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockIChecklistStorage) Delete(arg0 context.Context, arg1 dto.ChecklistID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIChecklistStorageMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIChecklistStorage)(nil).Delete), arg0, arg1)
}

// ReadMany mocks base method.
func (m *MockIChecklistStorage) ReadMany(arg0 context.Context, arg1 dto.ChecklistIDs) (*[]dto.ChecklistInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMany", arg0, arg1)
	ret0, _ := ret[0].(*[]dto.ChecklistInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMany indicates an expected call of ReadMany.
func (mr *MockIChecklistStorageMockRecorder) ReadMany(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMany", reflect.TypeOf((*MockIChecklistStorage)(nil).ReadMany), arg0, arg1)
}

// Update mocks base method.
func (m *MockIChecklistStorage) Update(arg0 context.Context, arg1 dto.UpdatedChecklistInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIChecklistStorageMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIChecklistStorage)(nil).Update), arg0, arg1)
}
