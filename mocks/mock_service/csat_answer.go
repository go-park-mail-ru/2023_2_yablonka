// Code generated by MockGen. DO NOT EDIT.
// Source: csat_answer.go
//
// Generated by this command:
//
//	mockgen -source=csat_answer.go -destination=../../mocks/mock_service/csat_answer.go -package=mock_service
//
// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"
	dto "server/internal/pkg/dto"

	gomock "go.uber.org/mock/gomock"
)

// MockICSATAnswerService is a mock of ICSATAnswerService interface.
type MockICSATAnswerService struct {
	ctrl     *gomock.Controller
	recorder *MockICSATAnswerServiceMockRecorder
}

// MockICSATAnswerServiceMockRecorder is the mock recorder for MockICSATAnswerService.
type MockICSATAnswerServiceMockRecorder struct {
	mock *MockICSATAnswerService
}

// NewMockICSATAnswerService creates a new mock instance.
func NewMockICSATAnswerService(ctrl *gomock.Controller) *MockICSATAnswerService {
	mock := &MockICSATAnswerService{ctrl: ctrl}
	mock.recorder = &MockICSATAnswerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICSATAnswerService) EXPECT() *MockICSATAnswerServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockICSATAnswerService) Create(arg0 context.Context, arg1 dto.NewCSATAnswer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockICSATAnswerServiceMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockICSATAnswerService)(nil).Create), arg0, arg1)
}
