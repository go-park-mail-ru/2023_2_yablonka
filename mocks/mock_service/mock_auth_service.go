// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/auth.go
//
// Generated by this command:
//
//	mockgen.exe --source=internal/service/auth.go --destination=mocks/mock_auth_service.go --package=mock_service
//
// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockIAuthService is a mock of IAuthService interface.
type MockIAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthServiceMockRecorder
}

// MockIAuthServiceMockRecorder is the mock recorder for MockIAuthService.
type MockIAuthServiceMockRecorder struct {
	mock *MockIAuthService
}

// NewMockIAuthService creates a new mock instance.
func NewMockIAuthService(ctrl *gomock.Controller) *MockIAuthService {
	mock := &MockIAuthService{ctrl: ctrl}
	mock.recorder = &MockIAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthService) EXPECT() *MockIAuthServiceMockRecorder {
	return m.recorder
}

// AuthUser mocks base method.
func (m *MockIAuthService) AuthUser(ctx context.Context, id uint64) (string, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthUser", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AuthUser indicates an expected call of AuthUser.
func (mr *MockIAuthServiceMockRecorder) AuthUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthUser", reflect.TypeOf((*MockIAuthService)(nil).AuthUser), ctx, id)
}

// GetLifetime mocks base method.
func (m *MockIAuthService) GetLifetime() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLifetime")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetLifetime indicates an expected call of GetLifetime.
func (mr *MockIAuthServiceMockRecorder) GetLifetime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLifetime", reflect.TypeOf((*MockIAuthService)(nil).GetLifetime))
}

// LogOut mocks base method.
func (m *MockIAuthService) LogOut(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogOut", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogOut indicates an expected call of LogOut.
func (mr *MockIAuthServiceMockRecorder) LogOut(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogOut", reflect.TypeOf((*MockIAuthService)(nil).LogOut), ctx, token)
}

// VerifyAuth mocks base method.
func (m *MockIAuthService) VerifyAuth(ctx context.Context, token string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAuth", ctx, token)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyAuth indicates an expected call of VerifyAuth.
func (mr *MockIAuthServiceMockRecorder) VerifyAuth(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAuth", reflect.TypeOf((*MockIAuthService)(nil).VerifyAuth), ctx, token)
}
