// Code generated by MockGen. DO NOT EDIT.
// Source: P:\VK Образование\Web\Sem_2\Project\2023_2_yablonka\internal\service\csat_question.go
//
// Generated by this command:
//
//	mockgen.exe --source=P:\VK Образование\Web\Sem_2\Project\2023_2_yablonka\internal\service\csat_question.go --destination=./mocks/mock_service/csat_question.go --package=mock_service
//
// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"
	dto "server/internal/pkg/dto"

	gomock "go.uber.org/mock/gomock"
)

// MockICSATQuestionService is a mock of ICSATQuestionService interface.
type MockICSATQuestionService struct {
	ctrl     *gomock.Controller
	recorder *MockICSATQuestionServiceMockRecorder
}

// MockICSATQuestionServiceMockRecorder is the mock recorder for MockICSATQuestionService.
type MockICSATQuestionServiceMockRecorder struct {
	mock *MockICSATQuestionService
}

// NewMockICSATQuestionService creates a new mock instance.
func NewMockICSATQuestionService(ctrl *gomock.Controller) *MockICSATQuestionService {
	mock := &MockICSATQuestionService{ctrl: ctrl}
	mock.recorder = &MockICSATQuestionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICSATQuestionService) EXPECT() *MockICSATQuestionServiceMockRecorder {
	return m.recorder
}

// CheckRating mocks base method.
func (m *MockICSATQuestionService) CheckRating(arg0 context.Context, arg1 dto.NewCSATAnswerInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRating", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckRating indicates an expected call of CheckRating.
func (mr *MockICSATQuestionServiceMockRecorder) CheckRating(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRating", reflect.TypeOf((*MockICSATQuestionService)(nil).CheckRating), arg0, arg1)
}

// Create mocks base method.
func (m *MockICSATQuestionService) Create(arg0 context.Context, arg1 dto.NewCSATQuestionInfo) (*dto.CSATQuestionFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*dto.CSATQuestionFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockICSATQuestionServiceMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockICSATQuestionService)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockICSATQuestionService) Delete(arg0 context.Context, arg1 dto.CSATQuestionID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockICSATQuestionServiceMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockICSATQuestionService)(nil).Delete), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockICSATQuestionService) GetAll(arg0 context.Context) (*[]dto.CSATQuestionFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].(*[]dto.CSATQuestionFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockICSATQuestionServiceMockRecorder) GetAll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockICSATQuestionService)(nil).GetAll), arg0)
}

// GetStats mocks base method.
func (m *MockICSATQuestionService) GetStats(arg0 context.Context) (*[]dto.QuestionWithStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", arg0)
	ret0, _ := ret[0].(*[]dto.QuestionWithStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockICSATQuestionServiceMockRecorder) GetStats(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockICSATQuestionService)(nil).GetStats), arg0)
}

// Update mocks base method.
func (m *MockICSATQuestionService) Update(arg0 context.Context, arg1 dto.UpdatedCSATQuestionInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockICSATQuestionServiceMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockICSATQuestionService)(nil).Update), arg0, arg1)
}
