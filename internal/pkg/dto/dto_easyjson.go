// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson56de76c1DecodeServerInternalPkgDto(in *jlexer.Lexer, out *WorkspaceID) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "workspace_id":
			out.Value = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto(out *jwriter.Writer, in WorkspaceID) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"workspace_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WorkspaceID) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WorkspaceID) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WorkspaceID) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WorkspaceID) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto1(in *jlexer.Lexer, out *WorkspaceBoardInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "thumbnail_url":
			if in.IsNull() {
				in.Skip()
				out.ThumbnailURL = nil
			} else {
				if out.ThumbnailURL == nil {
					out.ThumbnailURL = new(string)
				}
				*out.ThumbnailURL = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto1(out *jwriter.Writer, in WorkspaceBoardInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		if in.Description == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Description))
		}
	}
	{
		const prefix string = ",\"thumbnail_url\":"
		out.RawString(prefix)
		if in.ThumbnailURL == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ThumbnailURL))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WorkspaceBoardInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WorkspaceBoardInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WorkspaceBoardInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WorkspaceBoardInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto1(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto2(in *jlexer.Lexer, out *VerifiedAuthInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UserID":
			out.UserID = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto2(out *jwriter.Writer, in VerifiedAuthInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UserID\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.UserID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VerifiedAuthInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VerifiedAuthInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VerifiedAuthInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VerifiedAuthInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto2(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto3(in *jlexer.Lexer, out *UsersAndRoles) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]UserInWorkspace, 0, 1)
					} else {
						out.Users = []UserInWorkspace{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v1 UserInWorkspace
					(v1).UnmarshalEasyJSON(in)
					out.Users = append(out.Users, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]RoleInWorkspace, 0, 2)
					} else {
						out.Roles = []RoleInWorkspace{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v2 RoleInWorkspace
					(v2).UnmarshalEasyJSON(in)
					out.Roles = append(out.Roles, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto3(out *jwriter.Writer, in UsersAndRoles) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"users\":"
		out.RawString(prefix[1:])
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Users {
				if v3 > 0 {
					out.RawByte(',')
				}
				(v4).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"roles\":"
		out.RawString(prefix)
		if in.Roles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Roles {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UsersAndRoles) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UsersAndRoles) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UsersAndRoles) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UsersAndRoles) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto3(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto4(in *jlexer.Lexer, out *UserPublicInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.ID = uint64(in.Uint64())
		case "email":
			out.Email = string(in.String())
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "surname":
			if in.IsNull() {
				in.Skip()
				out.Surname = nil
			} else {
				if out.Surname == nil {
					out.Surname = new(string)
				}
				*out.Surname = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "avatar_url":
			if in.IsNull() {
				in.Skip()
				out.AvatarURL = nil
			} else {
				if out.AvatarURL == nil {
					out.AvatarURL = new(string)
				}
				*out.AvatarURL = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto4(out *jwriter.Writer, in UserPublicInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"surname\":"
		out.RawString(prefix)
		if in.Surname == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Surname))
		}
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		if in.Description == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Description))
		}
	}
	{
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		if in.AvatarURL == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.AvatarURL))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserPublicInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserPublicInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserPublicInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserPublicInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto4(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto5(in *jlexer.Lexer, out *UserProfileInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "surname":
			out.Surname = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto5(out *jwriter.Writer, in UserProfileInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Surname != "" {
		const prefix string = ",\"surname\":"
		out.RawString(prefix)
		out.String(string(in.Surname))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserProfileInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserProfileInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserProfileInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserProfileInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto5(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto6(in *jlexer.Lexer, out *UserPasswordHash) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto6(out *jwriter.Writer, in UserPasswordHash) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix[1:])
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserPasswordHash) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserPasswordHash) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserPasswordHash) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserPasswordHash) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto6(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto7(in *jlexer.Lexer, out *UserOwnerInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "owner_id":
			out.ID = uint64(in.Uint64())
		case "owner_email":
			out.Email = string(in.String())
		case "owner_name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "owner_surname":
			if in.IsNull() {
				in.Skip()
				out.Surname = nil
			} else {
				if out.Surname == nil {
					out.Surname = new(string)
				}
				*out.Surname = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto7(out *jwriter.Writer, in UserOwnerInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"owner_email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"owner_name\":"
		out.RawString(prefix)
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"owner_surname\":"
		out.RawString(prefix)
		if in.Surname == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Surname))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserOwnerInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserOwnerInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserOwnerInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserOwnerInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto7(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto8(in *jlexer.Lexer, out *UserOwnedWorkspaceInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "workspace_id":
			out.ID = uint64(in.Uint64())
		case "workspace_name":
			out.Name = string(in.String())
		case "boards":
			if in.IsNull() {
				in.Skip()
				out.Boards = nil
			} else {
				in.Delim('[')
				if out.Boards == nil {
					if !in.IsDelim(']') {
						out.Boards = make([]WorkspaceBoardInfo, 0, 1)
					} else {
						out.Boards = []WorkspaceBoardInfo{}
					}
				} else {
					out.Boards = (out.Boards)[:0]
				}
				for !in.IsDelim(']') {
					var v7 WorkspaceBoardInfo
					(v7).UnmarshalEasyJSON(in)
					out.Boards = append(out.Boards, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto8(out *jwriter.Writer, in UserOwnedWorkspaceInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"workspace_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"workspace_name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"boards\":"
		out.RawString(prefix)
		if in.Boards == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Boards {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserOwnedWorkspaceInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserOwnedWorkspaceInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserOwnedWorkspaceInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserOwnedWorkspaceInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto8(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto9(in *jlexer.Lexer, out *UserLogin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto9(out *jwriter.Writer, in UserLogin) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix[1:])
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserLogin) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserLogin) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserLogin) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserLogin) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto9(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto10(in *jlexer.Lexer, out *UserInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint64(in.Uint64())
		case "Email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto10(out *jwriter.Writer, in UserInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"Email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto10(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto11(in *jlexer.Lexer, out *UserInWorkspace) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.ID = uint64(in.Uint64())
		case "email":
			out.Email = string(in.String())
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "surname":
			if in.IsNull() {
				in.Skip()
				out.Surname = nil
			} else {
				if out.Surname == nil {
					out.Surname = new(string)
				}
				*out.Surname = string(in.String())
			}
		case "avatar_url":
			if in.IsNull() {
				in.Skip()
				out.AvatarURL = nil
			} else {
				if out.AvatarURL == nil {
					out.AvatarURL = new(string)
				}
				*out.AvatarURL = string(in.String())
			}
		case "role_id":
			if in.IsNull() {
				in.Skip()
				out.RoleID = nil
			} else {
				if out.RoleID == nil {
					out.RoleID = new(uint64)
				}
				*out.RoleID = uint64(in.Uint64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto11(out *jwriter.Writer, in UserInWorkspace) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"surname\":"
		out.RawString(prefix)
		if in.Surname == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Surname))
		}
	}
	{
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		if in.AvatarURL == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.AvatarURL))
		}
	}
	{
		const prefix string = ",\"role_id\":"
		out.RawString(prefix)
		if in.RoleID == nil {
			out.RawString("null")
		} else {
			out.Uint64(uint64(*in.RoleID))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserInWorkspace) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserInWorkspace) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserInWorkspace) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserInWorkspace) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto11(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto12(in *jlexer.Lexer, out *UserImageUrlInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.ID = uint64(in.Uint64())
		case "avatar_url":
			out.Url = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto12(out *jwriter.Writer, in UserImageUrlInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		out.String(string(in.Url))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserImageUrlInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserImageUrlInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserImageUrlInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserImageUrlInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto12(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto13(in *jlexer.Lexer, out *UserID) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.Value = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto13(out *jwriter.Writer, in UserID) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserID) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserID) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserID) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserID) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto13(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto14(in *jlexer.Lexer, out *UserGuestWorkspaceInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "workspace_id":
			out.ID = uint64(in.Uint64())
		case "workspace_name":
			out.Name = string(in.String())
		case "workspace_owner":
			(out.Owner).UnmarshalEasyJSON(in)
		case "boards":
			if in.IsNull() {
				in.Skip()
				out.Boards = nil
			} else {
				in.Delim('[')
				if out.Boards == nil {
					if !in.IsDelim(']') {
						out.Boards = make([]WorkspaceBoardInfo, 0, 1)
					} else {
						out.Boards = []WorkspaceBoardInfo{}
					}
				} else {
					out.Boards = (out.Boards)[:0]
				}
				for !in.IsDelim(']') {
					var v10 WorkspaceBoardInfo
					(v10).UnmarshalEasyJSON(in)
					out.Boards = append(out.Boards, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto14(out *jwriter.Writer, in UserGuestWorkspaceInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"workspace_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"workspace_name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"workspace_owner\":"
		out.RawString(prefix)
		(in.Owner).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"boards\":"
		out.RawString(prefix)
		if in.Boards == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Boards {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserGuestWorkspaceInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserGuestWorkspaceInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserGuestWorkspaceInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserGuestWorkspaceInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto14(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto15(in *jlexer.Lexer, out *UserEmail) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto15(out *jwriter.Writer, in UserEmail) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserEmail) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserEmail) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserEmail) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserEmail) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto15(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto16(in *jlexer.Lexer, out *UrlObj) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto16(out *jwriter.Writer, in UrlObj) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UrlObj) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UrlObj) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UrlObj) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UrlObj) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto16(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto17(in *jlexer.Lexer, out *UpdatedWorkspaceInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto17(out *jwriter.Writer, in UpdatedWorkspaceInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		if in.Description == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Description))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdatedWorkspaceInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdatedWorkspaceInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdatedWorkspaceInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdatedWorkspaceInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto17(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto18(in *jlexer.Lexer, out *UpdatedUserInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "surname":
			if in.IsNull() {
				in.Skip()
				out.Surname = nil
			} else {
				if out.Surname == nil {
					out.Surname = new(string)
				}
				*out.Surname = string(in.String())
			}
		case "avatar_url":
			out.AvatarURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto18(out *jwriter.Writer, in UpdatedUserInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"surname\":"
		out.RawString(prefix)
		if in.Surname == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Surname))
		}
	}
	{
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		out.String(string(in.AvatarURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdatedUserInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdatedUserInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdatedUserInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdatedUserInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto18(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto19(in *jlexer.Lexer, out *UpdatedTaskInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "start":
			if in.IsNull() {
				in.Skip()
				out.Start = nil
			} else {
				if out.Start == nil {
					out.Start = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Start).UnmarshalJSON(data))
				}
			}
		case "end":
			if in.IsNull() {
				in.Skip()
				out.End = nil
			} else {
				if out.End == nil {
					out.End = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.End).UnmarshalJSON(data))
				}
			}
		case "list_position":
			out.ListPosition = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto19(out *jwriter.Writer, in UpdatedTaskInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		if in.Description == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Description))
		}
	}
	{
		const prefix string = ",\"start\":"
		out.RawString(prefix)
		if in.Start == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Start).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"end\":"
		out.RawString(prefix)
		if in.End == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.End).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"list_position\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ListPosition))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdatedTaskInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdatedTaskInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdatedTaskInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdatedTaskInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto19(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto20(in *jlexer.Lexer, out *UpdatedTagInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "color":
			out.Color = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto20(out *jwriter.Writer, in UpdatedTagInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"color\":"
		out.RawString(prefix)
		out.String(string(in.Color))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdatedTagInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdatedTagInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdatedTagInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdatedTagInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto20(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto21(in *jlexer.Lexer, out *UpdatedListInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "list_position":
			out.ListPosition = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto21(out *jwriter.Writer, in UpdatedListInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		if in.Description == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Description))
		}
	}
	{
		const prefix string = ",\"list_position\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ListPosition))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdatedListInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdatedListInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdatedListInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdatedListInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto21(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto22(in *jlexer.Lexer, out *UpdatedChecklistItemInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "done":
			out.Done = bool(in.Bool())
		case "list_position":
			out.ListPosition = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto22(out *jwriter.Writer, in UpdatedChecklistItemInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"done\":"
		out.RawString(prefix)
		out.Bool(bool(in.Done))
	}
	{
		const prefix string = ",\"list_position\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ListPosition))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdatedChecklistItemInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdatedChecklistItemInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdatedChecklistItemInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdatedChecklistItemInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto22(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto23(in *jlexer.Lexer, out *UpdatedChecklistInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "list_position":
			out.ListPosition = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto23(out *jwriter.Writer, in UpdatedChecklistInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"list_position\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ListPosition))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdatedChecklistInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdatedChecklistInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdatedChecklistInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdatedChecklistInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto23(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto24(in *jlexer.Lexer, out *UpdatedCSATQuestionInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "content":
			out.Content = string(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto24(out *jwriter.Writer, in UpdatedCSATQuestionInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdatedCSATQuestionInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdatedCSATQuestionInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdatedCSATQuestionInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdatedCSATQuestionInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto24(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto25(in *jlexer.Lexer, out *UpdatedCSATQuestion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "content":
			out.Content = string(in.String())
		case "type":
			out.Type = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto25(out *jwriter.Writer, in UpdatedCSATQuestion) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdatedCSATQuestion) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdatedCSATQuestion) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdatedCSATQuestion) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdatedCSATQuestion) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto25(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto26(in *jlexer.Lexer, out *UpdatedBoardInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto26(out *jwriter.Writer, in UpdatedBoardInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdatedBoardInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdatedBoardInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdatedBoardInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdatedBoardInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto26(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto27(in *jlexer.Lexer, out *TaskMoveListInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ListID = uint64(in.Uint64())
		case "task_ids":
			if in.IsNull() {
				in.Skip()
				out.TaskIDs = nil
			} else {
				in.Delim('[')
				if out.TaskIDs == nil {
					if !in.IsDelim(']') {
						out.TaskIDs = make([]uint64, 0, 8)
					} else {
						out.TaskIDs = []uint64{}
					}
				} else {
					out.TaskIDs = (out.TaskIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v13 uint64
					v13 = uint64(in.Uint64())
					out.TaskIDs = append(out.TaskIDs, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto27(out *jwriter.Writer, in TaskMoveListInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ListID))
	}
	{
		const prefix string = ",\"task_ids\":"
		out.RawString(prefix)
		if in.TaskIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.TaskIDs {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.Uint64(uint64(v15))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TaskMoveListInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TaskMoveListInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TaskMoveListInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TaskMoveListInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto27(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto28(in *jlexer.Lexer, out *TaskMoveInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "task_id":
			out.TaskID = uint64(in.Uint64())
		case "old_list":
			(out.OldList).UnmarshalEasyJSON(in)
		case "new_list":
			(out.NewList).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto28(out *jwriter.Writer, in TaskMoveInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"task_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TaskID))
	}
	{
		const prefix string = ",\"old_list\":"
		out.RawString(prefix)
		(in.OldList).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"new_list\":"
		out.RawString(prefix)
		(in.NewList).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TaskMoveInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TaskMoveInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TaskMoveInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TaskMoveInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto28(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto29(in *jlexer.Lexer, out *TaskIDs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ids":
			if in.IsNull() {
				in.Skip()
				out.Values = nil
			} else {
				in.Delim('[')
				if out.Values == nil {
					if !in.IsDelim(']') {
						out.Values = make([]string, 0, 4)
					} else {
						out.Values = []string{}
					}
				} else {
					out.Values = (out.Values)[:0]
				}
				for !in.IsDelim(']') {
					var v16 string
					v16 = string(in.String())
					out.Values = append(out.Values, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto29(out *jwriter.Writer, in TaskIDs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ids\":"
		out.RawString(prefix[1:])
		if in.Values == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Values {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TaskIDs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TaskIDs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto29(w, v)
<<<<<<< HEAD
=======
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TaskIDs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TaskIDs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto29(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto30(in *jlexer.Lexer, out *TaskID) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Value = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto30(out *jwriter.Writer, in TaskID) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TaskID) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TaskID) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TaskID) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TaskID) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto30(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto31(in *jlexer.Lexer, out *TagInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "color":
			out.Color = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto31(out *jwriter.Writer, in TagInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"color\":"
		out.RawString(prefix)
		out.String(string(in.Color))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TagInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TagInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TagInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TagInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto31(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto32(in *jlexer.Lexer, out *TagID) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tag_id":
			out.Value = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto32(out *jwriter.Writer, in TagID) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tag_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TagID) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TagID) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto32(w, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TagID) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
<<<<<<< HEAD
	easyjson56de76c1DecodeServerInternalPkgDto29(&r, v)
=======
	easyjson56de76c1DecodeServerInternalPkgDto32(&r, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
<<<<<<< HEAD
func (v *TaskIDs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto29(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto30(in *jlexer.Lexer, out *TaskID) {
=======
func (v *TagID) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto32(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto33(in *jlexer.Lexer, out *TagAndTaskIDs) {
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tag_id":
			out.TagID = uint64(in.Uint64())
		case "task_id":
			out.TaskID = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
<<<<<<< HEAD
func easyjson56de76c1EncodeServerInternalPkgDto30(out *jwriter.Writer, in TaskID) {
=======
func easyjson56de76c1EncodeServerInternalPkgDto33(out *jwriter.Writer, in TagAndTaskIDs) {
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tag_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TagID))
	}
	{
		const prefix string = ",\"task_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.TaskID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TagAndTaskIDs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
<<<<<<< HEAD
	easyjson56de76c1EncodeServerInternalPkgDto30(&w, v)
=======
	easyjson56de76c1EncodeServerInternalPkgDto33(&w, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
<<<<<<< HEAD
func (v TaskID) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto30(w, v)
=======
func (v TagAndTaskIDs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto33(w, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TagAndTaskIDs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
<<<<<<< HEAD
	easyjson56de76c1DecodeServerInternalPkgDto30(&r, v)
=======
	easyjson56de76c1DecodeServerInternalPkgDto33(&r, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
<<<<<<< HEAD
func (v *TaskID) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto30(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto31(in *jlexer.Lexer, out *TagInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "color":
			out.Color = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto31(out *jwriter.Writer, in TagInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"color\":"
		out.RawString(prefix)
		out.String(string(in.Color))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TagInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TagInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TagInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TagInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto31(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto32(in *jlexer.Lexer, out *TagID) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tag_id":
			out.Value = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto32(out *jwriter.Writer, in TagID) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tag_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TagID) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TagID) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TagID) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TagID) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto32(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto33(in *jlexer.Lexer, out *TagAndTaskIDs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tag_id":
			out.TagID = uint64(in.Uint64())
		case "task_id":
			out.TaskID = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto33(out *jwriter.Writer, in TagAndTaskIDs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tag_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TagID))
	}
	{
		const prefix string = ",\"task_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.TaskID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TagAndTaskIDs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TagAndTaskIDs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TagAndTaskIDs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TagAndTaskIDs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto33(l, v)
}
=======
func (v *TagAndTaskIDs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto33(l, v)
}
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
func easyjson56de76c1DecodeServerInternalPkgDto34(in *jlexer.Lexer, out *SingleTaskInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "list_id":
			out.ListID = uint64(in.Uint64())
		case "date_created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateCreated).UnmarshalJSON(data))
			}
		case "name":
			out.Name = string(in.String())
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "list_position":
			out.ListPosition = uint64(in.Uint64())
		case "start":
			if in.IsNull() {
				in.Skip()
				out.Start = nil
			} else {
				if out.Start == nil {
					out.Start = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Start).UnmarshalJSON(data))
				}
			}
		case "end":
			if in.IsNull() {
				in.Skip()
				out.End = nil
			} else {
				if out.End == nil {
					out.End = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.End).UnmarshalJSON(data))
				}
			}
		case "users":
			if in.IsNull() {
				in.Skip()
				out.UserIDs = nil
			} else {
				in.Delim('[')
				if out.UserIDs == nil {
					if !in.IsDelim(']') {
						out.UserIDs = make([]string, 0, 4)
					} else {
						out.UserIDs = []string{}
					}
				} else {
					out.UserIDs = (out.UserIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v19 string
					v19 = string(in.String())
					out.UserIDs = append(out.UserIDs, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "comments":
			if in.IsNull() {
				in.Skip()
				out.CommentIDs = nil
			} else {
				in.Delim('[')
				if out.CommentIDs == nil {
					if !in.IsDelim(']') {
						out.CommentIDs = make([]string, 0, 4)
					} else {
						out.CommentIDs = []string{}
					}
				} else {
					out.CommentIDs = (out.CommentIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v20 string
					v20 = string(in.String())
					out.CommentIDs = append(out.CommentIDs, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "checklists":
			if in.IsNull() {
				in.Skip()
				out.ChecklistIDs = nil
			} else {
				in.Delim('[')
				if out.ChecklistIDs == nil {
					if !in.IsDelim(']') {
						out.ChecklistIDs = make([]string, 0, 4)
					} else {
						out.ChecklistIDs = []string{}
					}
				} else {
					out.ChecklistIDs = (out.ChecklistIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v21 string
					v21 = string(in.String())
					out.ChecklistIDs = append(out.ChecklistIDs, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.TagIDs = nil
			} else {
				in.Delim('[')
				if out.TagIDs == nil {
					if !in.IsDelim(']') {
						out.TagIDs = make([]string, 0, 4)
					} else {
						out.TagIDs = []string{}
					}
				} else {
					out.TagIDs = (out.TagIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v22 string
					v22 = string(in.String())
					out.TagIDs = append(out.TagIDs, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto34(out *jwriter.Writer, in SingleTaskInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"list_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ListID))
	}
	{
		const prefix string = ",\"date_created\":"
		out.RawString(prefix)
		out.Raw((in.DateCreated).MarshalJSON())
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		if in.Description == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Description))
		}
	}
	{
		const prefix string = ",\"list_position\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ListPosition))
	}
	{
		const prefix string = ",\"start\":"
		out.RawString(prefix)
		if in.Start == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Start).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"end\":"
		out.RawString(prefix)
		if in.End == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.End).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"users\":"
		out.RawString(prefix)
		if in.UserIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.UserIDs {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.String(string(v24))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"comments\":"
		out.RawString(prefix)
		if in.CommentIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v25, v26 := range in.CommentIDs {
				if v25 > 0 {
					out.RawByte(',')
				}
				out.String(string(v26))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"checklists\":"
		out.RawString(prefix)
		if in.ChecklistIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v27, v28 := range in.ChecklistIDs {
				if v27 > 0 {
<<<<<<< HEAD
					out.RawByte(',')
				}
				out.String(string(v28))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.TagIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.TagIDs {
				if v29 > 0 {
					out.RawByte(',')
				}
=======
					out.RawByte(',')
				}
				out.String(string(v28))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.TagIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.TagIDs {
				if v29 > 0 {
					out.RawByte(',')
				}
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
				out.String(string(v30))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SingleTaskInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SingleTaskInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SingleTaskInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SingleTaskInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto34(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto35(in *jlexer.Lexer, out *SingleListInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "board_id":
			out.BoardID = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "list_position":
			out.ListPosition = uint64(in.Uint64())
		case "cards":
			if in.IsNull() {
				in.Skip()
				out.TaskIDs = nil
			} else {
				in.Delim('[')
				if out.TaskIDs == nil {
					if !in.IsDelim(']') {
						out.TaskIDs = make([]string, 0, 4)
					} else {
						out.TaskIDs = []string{}
					}
				} else {
					out.TaskIDs = (out.TaskIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v31 string
					v31 = string(in.String())
					out.TaskIDs = append(out.TaskIDs, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto35(out *jwriter.Writer, in SingleListInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"board_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.BoardID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"list_position\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ListPosition))
	}
	{
		const prefix string = ",\"cards\":"
		out.RawString(prefix)
		if in.TaskIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.TaskIDs {
				if v32 > 0 {
					out.RawByte(',')
				}
				out.String(string(v33))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SingleListInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SingleListInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SingleListInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SingleListInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto35(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto36(in *jlexer.Lexer, out *SingleBoardInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "board_id":
			out.ID = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "workspace_id":
			out.WorkspaceID = uint64(in.Uint64())
		case "owner_id":
			out.WorkspaceOwnerID = uint64(in.Uint64())
		case "thumbnail_url":
			if in.IsNull() {
				in.Skip()
				out.ThumbnailURL = nil
			} else {
				if out.ThumbnailURL == nil {
					out.ThumbnailURL = new(string)
				}
				*out.ThumbnailURL = string(in.String())
			}
		case "date_created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateCreated).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto36(out *jwriter.Writer, in SingleBoardInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"board_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"workspace_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.WorkspaceID))
	}
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.WorkspaceOwnerID))
	}
	{
		const prefix string = ",\"thumbnail_url\":"
		out.RawString(prefix)
		if in.ThumbnailURL == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ThumbnailURL))
		}
	}
	{
		const prefix string = ",\"date_created\":"
		out.RawString(prefix)
		out.Raw((in.DateCreated).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SingleBoardInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SingleBoardInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SingleBoardInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SingleBoardInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto36(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto37(in *jlexer.Lexer, out *SignupInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto37(out *jwriter.Writer, in SignupInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SignupInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SignupInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SignupInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SignupInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto37(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto38(in *jlexer.Lexer, out *SessionToken) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "session_token":
			out.ID = string(in.String())
		case "expiration_date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ExpirationDate).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto38(out *jwriter.Writer, in SessionToken) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"session_token\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"expiration_date\":"
		out.RawString(prefix)
		out.Raw((in.ExpirationDate).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SessionToken) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SessionToken) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SessionToken) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SessionToken) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto38(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto39(in *jlexer.Lexer, out *RoleInWorkspace) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.ID = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto39(out *jwriter.Writer, in RoleInWorkspace) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RoleInWorkspace) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RoleInWorkspace) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RoleInWorkspace) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RoleInWorkspace) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto39(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto40(in *jlexer.Lexer, out *ReplyInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "original_id":
			out.OriginalID = uint64(in.Uint64())
		case "id":
			out.ID = uint64(in.Uint64())
		case "user_id":
			out.UserID = uint64(in.Uint64())
		case "text":
			out.Text = string(in.String())
		case "date_created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateCreated).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto40(out *jwriter.Writer, in ReplyInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"original_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.OriginalID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.UserID))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"date_created\":"
		out.RawString(prefix)
		out.Raw((in.DateCreated).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReplyInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto40(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReplyInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto40(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReplyInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto40(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReplyInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto40(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto41(in *jlexer.Lexer, out *RemoveTaskUserInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = uint64(in.Uint64())
		case "task_id":
			out.TaskID = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto41(out *jwriter.Writer, in RemoveTaskUserInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.UserID))
	}
	{
		const prefix string = ",\"task_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.TaskID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RemoveTaskUserInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto41(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RemoveTaskUserInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto41(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RemoveTaskUserInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto41(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RemoveTaskUserInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto41(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto42(in *jlexer.Lexer, out *RemoveFileInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "task_id":
			out.TaskID = uint64(in.Uint64())
		case "original_name":
			out.OriginalName = string(in.String())
		case "file_path":
			out.FilePath = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto42(out *jwriter.Writer, in RemoveFileInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"task_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TaskID))
	}
	{
		const prefix string = ",\"original_name\":"
		out.RawString(prefix)
		out.String(string(in.OriginalName))
	}
	{
		const prefix string = ",\"file_path\":"
		out.RawString(prefix)
		out.String(string(in.FilePath))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RemoveFileInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto42(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RemoveFileInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto42(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RemoveFileInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto42(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RemoveFileInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto42(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto43(in *jlexer.Lexer, out *RemoveBoardUserInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = uint64(in.Uint64())
		case "board_id":
			out.BoardID = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto43(out *jwriter.Writer, in RemoveBoardUserInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.UserID))
	}
	{
		const prefix string = ",\"board_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.BoardID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RemoveBoardUserInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto43(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RemoveBoardUserInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto43(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RemoveBoardUserInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto43(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RemoveBoardUserInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto43(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto44(in *jlexer.Lexer, out *RatingStatsWithQuestionID) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "question_id":
			out.QuestionID = uint64(in.Uint64())
		case "rating":
			out.Rating = uint64(in.Uint64())
		case "count":
			out.Count = uint64(in.Uint64())
		case "average":
			out.Average = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto44(out *jwriter.Writer, in RatingStatsWithQuestionID) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"question_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.QuestionID))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Rating))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Count))
	}
	{
		const prefix string = ",\"average\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Average))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RatingStatsWithQuestionID) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto44(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RatingStatsWithQuestionID) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto44(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RatingStatsWithQuestionID) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto44(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RatingStatsWithQuestionID) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto44(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto45(in *jlexer.Lexer, out *RatingStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rating":
			out.Rating = uint64(in.Uint64())
		case "count":
			out.Count = uint64(in.Uint64())
		case "average":
			out.Average = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto45(out *jwriter.Writer, in RatingStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Rating))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Count))
	}
	{
		const prefix string = ",\"average\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Average))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RatingStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto45(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RatingStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto45(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RatingStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto45(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RatingStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto45(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto46(in *jlexer.Lexer, out *QuestionWithStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "question_id":
			out.ID = uint64(in.Uint64())
		case "content":
			out.Content = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "stats":
			if in.IsNull() {
				in.Skip()
				out.Stats = nil
			} else {
				in.Delim('[')
				if out.Stats == nil {
					if !in.IsDelim(']') {
						out.Stats = make([]RatingStats, 0, 2)
					} else {
						out.Stats = []RatingStats{}
					}
				} else {
					out.Stats = (out.Stats)[:0]
				}
				for !in.IsDelim(']') {
					var v34 RatingStats
					(v34).UnmarshalEasyJSON(in)
					out.Stats = append(out.Stats, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto46(out *jwriter.Writer, in QuestionWithStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"question_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"stats\":"
		out.RawString(prefix)
		if in.Stats == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v35, v36 := range in.Stats {
				if v35 > 0 {
					out.RawByte(',')
				}
				(v36).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QuestionWithStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto46(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QuestionWithStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto46(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuestionWithStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto46(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QuestionWithStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto46(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto47(in *jlexer.Lexer, out *PasswordHashesInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = uint64(in.Uint64())
		case "NewPasswordHash":
			out.NewPasswordHash = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto47(out *jwriter.Writer, in PasswordHashesInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.UserID))
	}
	{
		const prefix string = ",\"NewPasswordHash\":"
		out.RawString(prefix)
		out.String(string(in.NewPasswordHash))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PasswordHashesInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto47(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PasswordHashesInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto47(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PasswordHashesInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto47(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PasswordHashesInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto47(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto48(in *jlexer.Lexer, out *PasswordChangeInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "old_password":
			out.OldPassword = string(in.String())
		case "new_password":
			out.NewPassword = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto48(out *jwriter.Writer, in PasswordChangeInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"old_password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OldPassword))
	}
	{
		const prefix string = ",\"new_password\":"
		out.RawString(prefix)
		out.String(string(in.NewPassword))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PasswordChangeInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto48(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PasswordChangeInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto48(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PasswordChangeInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto48(&r, v)
<<<<<<< HEAD
=======
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PasswordChangeInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto48(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto49(in *jlexer.Lexer, out *NewWorkspaceInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "owner_id":
			out.OwnerID = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto49(out *jwriter.Writer, in NewWorkspaceInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.OwnerID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewWorkspaceInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto49(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewWorkspaceInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto49(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewWorkspaceInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto49(&r, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
<<<<<<< HEAD
func (v *PasswordChangeInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto48(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto49(in *jlexer.Lexer, out *NewWorkspaceInfo) {
=======
func (v *NewWorkspaceInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto49(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto50(in *jlexer.Lexer, out *NewTaskInfo) {
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "list_id":
			out.ListID = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "list_position":
			out.ListPosition = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
<<<<<<< HEAD
func easyjson56de76c1EncodeServerInternalPkgDto49(out *jwriter.Writer, in NewWorkspaceInfo) {
=======
func easyjson56de76c1EncodeServerInternalPkgDto50(out *jwriter.Writer, in NewTaskInfo) {
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"list_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ListID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"list_position\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ListPosition))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewTaskInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
<<<<<<< HEAD
	easyjson56de76c1EncodeServerInternalPkgDto49(&w, v)
=======
	easyjson56de76c1EncodeServerInternalPkgDto50(&w, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
<<<<<<< HEAD
func (v NewWorkspaceInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto49(w, v)
=======
func (v NewTaskInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto50(w, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewTaskInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
<<<<<<< HEAD
	easyjson56de76c1DecodeServerInternalPkgDto49(&r, v)
=======
	easyjson56de76c1DecodeServerInternalPkgDto50(&r, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
<<<<<<< HEAD
func (v *NewWorkspaceInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto49(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto50(in *jlexer.Lexer, out *NewTaskInfo) {
=======
func (v *NewTaskInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto50(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto51(in *jlexer.Lexer, out *NewTagInfo) {
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "task_id":
			out.TaskID = uint64(in.Uint64())
		case "board_id":
			out.BoardID = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "color":
			out.Color = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
<<<<<<< HEAD
func easyjson56de76c1EncodeServerInternalPkgDto50(out *jwriter.Writer, in NewTaskInfo) {
=======
func easyjson56de76c1EncodeServerInternalPkgDto51(out *jwriter.Writer, in NewTagInfo) {
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"task_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TaskID))
	}
	{
		const prefix string = ",\"board_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.BoardID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"color\":"
		out.RawString(prefix)
		out.String(string(in.Color))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewTagInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
<<<<<<< HEAD
	easyjson56de76c1EncodeServerInternalPkgDto50(&w, v)
=======
	easyjson56de76c1EncodeServerInternalPkgDto51(&w, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
<<<<<<< HEAD
func (v NewTaskInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto50(w, v)
=======
func (v NewTagInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto51(w, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewTagInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
<<<<<<< HEAD
	easyjson56de76c1DecodeServerInternalPkgDto50(&r, v)
=======
	easyjson56de76c1DecodeServerInternalPkgDto51(&r, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
<<<<<<< HEAD
func (v *NewTaskInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto50(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto51(in *jlexer.Lexer, out *NewTagInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "task_id":
			out.TaskID = uint64(in.Uint64())
		case "board_id":
			out.BoardID = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "color":
			out.Color = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto51(out *jwriter.Writer, in NewTagInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"task_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TaskID))
	}
	{
		const prefix string = ",\"board_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.BoardID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"color\":"
		out.RawString(prefix)
		out.String(string(in.Color))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewTagInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto51(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewTagInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto51(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewTagInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto51(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewTagInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto51(l, v)
}
=======
func (v *NewTagInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto51(l, v)
}
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
func easyjson56de76c1DecodeServerInternalPkgDto52(in *jlexer.Lexer, out *NewListInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "board_id":
			out.BoardID = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "list_position":
			out.ListPosition = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto52(out *jwriter.Writer, in NewListInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"board_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.BoardID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		if in.Description == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Description))
		}
	}
	{
		const prefix string = ",\"list_position\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ListPosition))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewListInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto52(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewListInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto52(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewListInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto52(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewListInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto52(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto53(in *jlexer.Lexer, out *NewCommentInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = uint64(in.Uint64())
		case "task_id":
			out.TaskID = uint64(in.Uint64())
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto53(out *jwriter.Writer, in NewCommentInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.UserID))
	}
	{
		const prefix string = ",\"task_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.TaskID))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewCommentInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto53(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewCommentInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto53(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewCommentInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto53(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewCommentInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto53(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto54(in *jlexer.Lexer, out *NewChecklistItemInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "checklist_id":
			out.ChecklistID = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "done":
			out.Done = bool(in.Bool())
		case "list_position":
			out.ListPosition = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto54(out *jwriter.Writer, in NewChecklistItemInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"checklist_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ChecklistID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"done\":"
		out.RawString(prefix)
		out.Bool(bool(in.Done))
	}
	{
		const prefix string = ",\"list_position\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ListPosition))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewChecklistItemInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto54(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewChecklistItemInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto54(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewChecklistItemInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto54(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewChecklistItemInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto54(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto55(in *jlexer.Lexer, out *NewChecklistInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "task_id":
			out.TaskID = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "list_position":
			out.ListPosition = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto55(out *jwriter.Writer, in NewChecklistInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"task_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TaskID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"list_position\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ListPosition))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewChecklistInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto55(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewChecklistInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto55(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewChecklistInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto55(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewChecklistInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto55(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto56(in *jlexer.Lexer, out *NewCSATQuestionInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "content":
			out.Content = string(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto56(out *jwriter.Writer, in NewCSATQuestionInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix[1:])
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewCSATQuestionInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto56(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewCSATQuestionInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto56(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewCSATQuestionInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto56(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewCSATQuestionInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto56(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto57(in *jlexer.Lexer, out *NewCSATQuestion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "content":
			out.Content = string(in.String())
		case "type":
			out.TypeID = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto57(out *jwriter.Writer, in NewCSATQuestion) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix[1:])
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.TypeID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewCSATQuestion) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto57(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewCSATQuestion) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto57(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewCSATQuestion) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto57(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewCSATQuestion) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto57(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto58(in *jlexer.Lexer, out *NewCSATAnswerInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "id_question":
			out.QuestionID = uint64(in.Uint64())
		case "rating":
			out.Rating = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto58(out *jwriter.Writer, in NewCSATAnswerInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"id_question\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.QuestionID))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Rating))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewCSATAnswerInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto58(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewCSATAnswerInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto58(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewCSATAnswerInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto58(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewCSATAnswerInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto58(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto59(in *jlexer.Lexer, out *NewCSATAnswer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UserID":
			out.UserID = uint64(in.Uint64())
		case "QuestionID":
			out.QuestionID = uint64(in.Uint64())
		case "Rating":
			out.Rating = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto59(out *jwriter.Writer, in NewCSATAnswer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UserID\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.UserID))
	}
	{
		const prefix string = ",\"QuestionID\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.QuestionID))
	}
	{
		const prefix string = ",\"Rating\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Rating))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewCSATAnswer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto59(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewCSATAnswer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto59(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewCSATAnswer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto59(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewCSATAnswer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto59(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto60(in *jlexer.Lexer, out *LoginInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "password_hash":
			out.PasswordHash = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto60(out *jwriter.Writer, in LoginInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"password_hash\":"
		out.RawString(prefix)
		out.String(string(in.PasswordHash))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LoginInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto60(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LoginInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto60(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LoginInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto60(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LoginInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto60(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto61(in *jlexer.Lexer, out *ListIDs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ids":
			if in.IsNull() {
				in.Skip()
				out.Values = nil
			} else {
				in.Delim('[')
				if out.Values == nil {
					if !in.IsDelim(']') {
						out.Values = make([]uint64, 0, 8)
					} else {
						out.Values = []uint64{}
					}
				} else {
					out.Values = (out.Values)[:0]
				}
				for !in.IsDelim(']') {
					var v37 uint64
					v37 = uint64(in.Uint64())
					out.Values = append(out.Values, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto61(out *jwriter.Writer, in ListIDs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ids\":"
		out.RawString(prefix[1:])
		if in.Values == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.Values {
				if v38 > 0 {
					out.RawByte(',')
				}
				out.Uint64(uint64(v39))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListIDs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto61(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListIDs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto61(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListIDs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto61(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListIDs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto61(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto62(in *jlexer.Lexer, out *ListID) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Value = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto62(out *jwriter.Writer, in ListID) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListID) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto62(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListID) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto62(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListID) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto62(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListID) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto62(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto63(in *jlexer.Lexer, out *JSONResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			if m, ok := out.Body.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Body.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Body = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto63(out *jwriter.Writer, in JSONResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		if m, ok := in.Body.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Body.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Body))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v JSONResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto63(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JSONResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto63(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *JSONResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto63(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JSONResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto63(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto64(in *jlexer.Lexer, out *IndividualBoardRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "board_id":
			out.BoardID = uint64(in.Uint64())
		case "user_id":
			out.UserID = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto64(out *jwriter.Writer, in IndividualBoardRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"board_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.BoardID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.UserID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IndividualBoardRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto64(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IndividualBoardRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto64(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IndividualBoardRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto64(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IndividualBoardRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto64(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto65(in *jlexer.Lexer, out *IndividualBoardInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "board_id":
			out.ID = uint64(in.Uint64())
		case "owner_id":
			out.OwnerID = uint64(in.Uint64())
		case "owner_email":
			out.OwnerEmail = string(in.String())
		case "board_name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "thumbnail_url":
			if in.IsNull() {
				in.Skip()
				out.ThumbnailURL = nil
			} else {
				if out.ThumbnailURL == nil {
					out.ThumbnailURL = new(string)
				}
				*out.ThumbnailURL = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto65(out *jwriter.Writer, in IndividualBoardInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"board_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.OwnerID))
	}
	{
		const prefix string = ",\"owner_email\":"
		out.RawString(prefix)
		out.String(string(in.OwnerEmail))
	}
	{
		const prefix string = ",\"board_name\":"
		out.RawString(prefix)
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"thumbnail_url\":"
		out.RawString(prefix)
		if in.ThumbnailURL == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ThumbnailURL))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IndividualBoardInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto65(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IndividualBoardInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto65(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IndividualBoardInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto65(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IndividualBoardInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto65(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto66(in *jlexer.Lexer, out *ImageUrl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto66(out *jwriter.Writer, in ImageUrl) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ImageUrl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto66(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ImageUrl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto66(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ImageUrl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto66(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ImageUrl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto66(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto67(in *jlexer.Lexer, out *GuestWorkspaceReturn) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "WorkspaceID":
			out.WorkspaceID = uint64(in.Uint64())
		case "WorkspaceName":
			out.WorkspaceName = string(in.String())
		case "WorkspaceDateCreated":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.WorkspaceDateCreated).UnmarshalJSON(data))
			}
		case "owner_id":
			out.ID = uint64(in.Uint64())
		case "owner_email":
			out.Email = string(in.String())
		case "owner_name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "owner_surname":
			if in.IsNull() {
				in.Skip()
				out.Surname = nil
			} else {
				if out.Surname == nil {
					out.Surname = new(string)
				}
				*out.Surname = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto67(out *jwriter.Writer, in GuestWorkspaceReturn) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"WorkspaceID\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.WorkspaceID))
	}
	{
		const prefix string = ",\"WorkspaceName\":"
		out.RawString(prefix)
		out.String(string(in.WorkspaceName))
	}
	{
		const prefix string = ",\"WorkspaceDateCreated\":"
		out.RawString(prefix)
		out.Raw((in.WorkspaceDateCreated).MarshalJSON())
	}
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"owner_email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"owner_name\":"
		out.RawString(prefix)
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"owner_surname\":"
		out.RawString(prefix)
		if in.Surname == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Surname))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GuestWorkspaceReturn) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto67(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GuestWorkspaceReturn) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto67(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GuestWorkspaceReturn) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto67(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GuestWorkspaceReturn) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto67(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto68(in *jlexer.Lexer, out *FullBoardResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "board":
			(out.Board).UnmarshalEasyJSON(in)
		case "lists":
			if in.IsNull() {
				in.Skip()
				out.Lists = nil
			} else {
				in.Delim('[')
				if out.Lists == nil {
					if !in.IsDelim(']') {
						out.Lists = make([]SingleListInfo, 0, 1)
					} else {
						out.Lists = []SingleListInfo{}
					}
				} else {
					out.Lists = (out.Lists)[:0]
				}
				for !in.IsDelim(']') {
					var v40 SingleListInfo
					(v40).UnmarshalEasyJSON(in)
					out.Lists = append(out.Lists, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cards":
			if in.IsNull() {
				in.Skip()
				out.Tasks = nil
			} else {
				in.Delim('[')
				if out.Tasks == nil {
					if !in.IsDelim(']') {
						out.Tasks = make([]SingleTaskInfo, 0, 0)
					} else {
						out.Tasks = []SingleTaskInfo{}
					}
				} else {
					out.Tasks = (out.Tasks)[:0]
				}
				for !in.IsDelim(']') {
					var v41 SingleTaskInfo
					(v41).UnmarshalEasyJSON(in)
					out.Tasks = append(out.Tasks, v41)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]UserPublicInfo, 0, 1)
					} else {
						out.Users = []UserPublicInfo{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v42 UserPublicInfo
					(v42).UnmarshalEasyJSON(in)
					out.Users = append(out.Users, v42)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "comments":
			if in.IsNull() {
				in.Skip()
				out.Comments = nil
			} else {
				in.Delim('[')
				if out.Comments == nil {
					if !in.IsDelim(']') {
						out.Comments = make([]CommentInfo, 0, 1)
					} else {
						out.Comments = []CommentInfo{}
					}
				} else {
					out.Comments = (out.Comments)[:0]
				}
				for !in.IsDelim(']') {
					var v43 CommentInfo
					(v43).UnmarshalEasyJSON(in)
					out.Comments = append(out.Comments, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "checklists":
			if in.IsNull() {
				in.Skip()
				out.Checklists = nil
			} else {
				in.Delim('[')
				if out.Checklists == nil {
					if !in.IsDelim(']') {
						out.Checklists = make([]ChecklistInfo, 0, 1)
					} else {
						out.Checklists = []ChecklistInfo{}
					}
				} else {
					out.Checklists = (out.Checklists)[:0]
				}
				for !in.IsDelim(']') {
					var v44 ChecklistInfo
					(v44).UnmarshalEasyJSON(in)
					out.Checklists = append(out.Checklists, v44)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "checklist_items":
			if in.IsNull() {
				in.Skip()
				out.ChecklistItems = nil
			} else {
				in.Delim('[')
				if out.ChecklistItems == nil {
					if !in.IsDelim(']') {
						out.ChecklistItems = make([]ChecklistItemInfo, 0, 1)
					} else {
						out.ChecklistItems = []ChecklistItemInfo{}
					}
				} else {
					out.ChecklistItems = (out.ChecklistItems)[:0]
				}
				for !in.IsDelim(']') {
					var v45 ChecklistItemInfo
					(v45).UnmarshalEasyJSON(in)
					out.ChecklistItems = append(out.ChecklistItems, v45)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]TagInfo, 0, 1)
					} else {
						out.Tags = []TagInfo{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v46 TagInfo
					(v46).UnmarshalEasyJSON(in)
					out.Tags = append(out.Tags, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto68(out *jwriter.Writer, in FullBoardResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"board\":"
		out.RawString(prefix[1:])
		(in.Board).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"lists\":"
		out.RawString(prefix)
		if in.Lists == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v47, v48 := range in.Lists {
				if v47 > 0 {
					out.RawByte(',')
				}
				(v48).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"cards\":"
		out.RawString(prefix)
		if in.Tasks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v49, v50 := range in.Tasks {
				if v49 > 0 {
					out.RawByte(',')
				}
				(v50).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"users\":"
		out.RawString(prefix)
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v51, v52 := range in.Users {
				if v51 > 0 {
					out.RawByte(',')
				}
				(v52).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"comments\":"
		out.RawString(prefix)
		if in.Comments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v53, v54 := range in.Comments {
				if v53 > 0 {
					out.RawByte(',')
				}
				(v54).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"checklists\":"
		out.RawString(prefix)
		if in.Checklists == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v55, v56 := range in.Checklists {
				if v55 > 0 {
					out.RawByte(',')
				}
				(v56).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"checklist_items\":"
		out.RawString(prefix)
		if in.ChecklistItems == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v57, v58 := range in.ChecklistItems {
				if v57 > 0 {
					out.RawByte(',')
				}
				(v58).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v59, v60 := range in.Tags {
				if v59 > 0 {
					out.RawByte(',')
				}
				(v60).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FullBoardResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto68(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FullBoardResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto68(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FullBoardResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto68(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FullBoardResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto68(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto69(in *jlexer.Lexer, out *CommentInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "user_id":
			out.UserID = uint64(in.Uint64())
		case "text":
			out.Text = string(in.String())
		case "date_created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateCreated).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto69(out *jwriter.Writer, in CommentInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.UserID))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"date_created\":"
		out.RawString(prefix)
		out.Raw((in.DateCreated).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommentInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto69(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommentInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto69(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommentInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto69(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommentInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto69(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto70(in *jlexer.Lexer, out *CommentIDs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ids":
			if in.IsNull() {
				in.Skip()
				out.Values = nil
			} else {
				in.Delim('[')
				if out.Values == nil {
					if !in.IsDelim(']') {
						out.Values = make([]string, 0, 4)
					} else {
						out.Values = []string{}
					}
				} else {
					out.Values = (out.Values)[:0]
				}
				for !in.IsDelim(']') {
					var v61 string
					v61 = string(in.String())
					out.Values = append(out.Values, v61)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto70(out *jwriter.Writer, in CommentIDs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ids\":"
		out.RawString(prefix[1:])
		if in.Values == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v62, v63 := range in.Values {
				if v62 > 0 {
					out.RawByte(',')
				}
				out.String(string(v63))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommentIDs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto70(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommentIDs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto70(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommentIDs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto70(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommentIDs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto70(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto71(in *jlexer.Lexer, out *CommentID) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Value = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto71(out *jwriter.Writer, in CommentID) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommentID) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto71(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommentID) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto71(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommentID) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto71(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommentID) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto71(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto72(in *jlexer.Lexer, out *ChecklistItemStringIDs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ids":
			if in.IsNull() {
				in.Skip()
				out.Values = nil
			} else {
				in.Delim('[')
				if out.Values == nil {
					if !in.IsDelim(']') {
						out.Values = make([]string, 0, 4)
					} else {
						out.Values = []string{}
					}
				} else {
					out.Values = (out.Values)[:0]
				}
				for !in.IsDelim(']') {
					var v64 string
					v64 = string(in.String())
					out.Values = append(out.Values, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto72(out *jwriter.Writer, in ChecklistItemStringIDs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ids\":"
		out.RawString(prefix[1:])
		if in.Values == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v65, v66 := range in.Values {
				if v65 > 0 {
					out.RawByte(',')
				}
				out.String(string(v66))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChecklistItemStringIDs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto72(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChecklistItemStringIDs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto72(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChecklistItemStringIDs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto72(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChecklistItemStringIDs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto72(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto73(in *jlexer.Lexer, out *ChecklistItemInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "checklist_id":
			out.ChecklistID = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "done":
			out.Done = bool(in.Bool())
		case "list_position":
			out.ListPosition = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto73(out *jwriter.Writer, in ChecklistItemInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"checklist_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ChecklistID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"done\":"
		out.RawString(prefix)
		out.Bool(bool(in.Done))
	}
	{
		const prefix string = ",\"list_position\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ListPosition))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChecklistItemInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto73(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChecklistItemInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto73(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChecklistItemInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto73(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChecklistItemInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto73(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto74(in *jlexer.Lexer, out *ChecklistItemIDs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ids":
			if in.IsNull() {
				in.Skip()
				out.Values = nil
			} else {
				in.Delim('[')
				if out.Values == nil {
					if !in.IsDelim(']') {
						out.Values = make([]uint64, 0, 8)
					} else {
						out.Values = []uint64{}
					}
				} else {
					out.Values = (out.Values)[:0]
				}
				for !in.IsDelim(']') {
					var v67 uint64
					v67 = uint64(in.Uint64())
					out.Values = append(out.Values, v67)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto74(out *jwriter.Writer, in ChecklistItemIDs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ids\":"
		out.RawString(prefix[1:])
		if in.Values == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v68, v69 := range in.Values {
				if v68 > 0 {
					out.RawByte(',')
				}
				out.Uint64(uint64(v69))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChecklistItemIDs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto74(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChecklistItemIDs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto74(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChecklistItemIDs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto74(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChecklistItemIDs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto74(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto75(in *jlexer.Lexer, out *ChecklistItemID) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Value = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto75(out *jwriter.Writer, in ChecklistItemID) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChecklistItemID) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto75(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChecklistItemID) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto75(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChecklistItemID) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto75(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChecklistItemID) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto75(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto76(in *jlexer.Lexer, out *ChecklistInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "task_id":
			out.TaskID = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "list_position":
			out.ListPosition = uint64(in.Uint64())
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]string, 0, 4)
					} else {
						out.Items = []string{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v70 string
					v70 = string(in.String())
					out.Items = append(out.Items, v70)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto76(out *jwriter.Writer, in ChecklistInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"task_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.TaskID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"list_position\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ListPosition))
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v71, v72 := range in.Items {
				if v71 > 0 {
					out.RawByte(',')
				}
				out.String(string(v72))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChecklistInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto76(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChecklistInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto76(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChecklistInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto76(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChecklistInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto76(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto77(in *jlexer.Lexer, out *ChecklistIDs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ids":
			if in.IsNull() {
				in.Skip()
				out.Values = nil
			} else {
				in.Delim('[')
				if out.Values == nil {
					if !in.IsDelim(']') {
						out.Values = make([]string, 0, 4)
					} else {
						out.Values = []string{}
					}
				} else {
					out.Values = (out.Values)[:0]
				}
				for !in.IsDelim(']') {
					var v73 string
					v73 = string(in.String())
					out.Values = append(out.Values, v73)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto77(out *jwriter.Writer, in ChecklistIDs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ids\":"
		out.RawString(prefix[1:])
		if in.Values == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v74, v75 := range in.Values {
				if v74 > 0 {
					out.RawByte(',')
				}
				out.String(string(v75))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChecklistIDs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto77(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChecklistIDs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto77(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChecklistIDs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto77(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChecklistIDs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto77(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto78(in *jlexer.Lexer, out *ChecklistID) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Value = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto78(out *jwriter.Writer, in ChecklistID) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChecklistID) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto78(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChecklistID) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto78(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChecklistID) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto78(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChecklistID) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto78(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto79(in *jlexer.Lexer, out *CheckTaskAccessInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = uint64(in.Uint64())
		case "task_id":
			out.TaskID = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto79(out *jwriter.Writer, in CheckTaskAccessInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.UserID))
	}
	{
		const prefix string = ",\"task_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.TaskID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CheckTaskAccessInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto79(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CheckTaskAccessInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto79(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CheckTaskAccessInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto79(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CheckTaskAccessInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto79(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto80(in *jlexer.Lexer, out *CheckBoardAccessInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = uint64(in.Uint64())
		case "board_id":
			out.BoardID = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto80(out *jwriter.Writer, in CheckBoardAccessInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.UserID))
	}
	{
		const prefix string = ",\"board_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.BoardID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CheckBoardAccessInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto80(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CheckBoardAccessInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto80(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CheckBoardAccessInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto80(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CheckBoardAccessInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto80(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto81(in *jlexer.Lexer, out *ChangeWorkspaceGuestsInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.WorkspaceID = uint64(in.Uint64())
		case "guests":
			if in.IsNull() {
				in.Skip()
				out.Guests = nil
			} else {
				in.Delim('[')
				if out.Guests == nil {
					if !in.IsDelim(']') {
						out.Guests = make([]UserID, 0, 8)
					} else {
						out.Guests = []UserID{}
					}
				} else {
					out.Guests = (out.Guests)[:0]
				}
				for !in.IsDelim(']') {
					var v76 UserID
					(v76).UnmarshalEasyJSON(in)
					out.Guests = append(out.Guests, v76)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto81(out *jwriter.Writer, in ChangeWorkspaceGuestsInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.WorkspaceID))
	}
	{
		const prefix string = ",\"guests\":"
		out.RawString(prefix)
		if in.Guests == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v77, v78 := range in.Guests {
				if v77 > 0 {
					out.RawByte(',')
				}
				(v78).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChangeWorkspaceGuestsInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto81(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChangeWorkspaceGuestsInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto81(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChangeWorkspaceGuestsInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto81(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChangeWorkspaceGuestsInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto81(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto82(in *jlexer.Lexer, out *CSRFToken) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "csrf_token":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto82(out *jwriter.Writer, in CSRFToken) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"csrf_token\":"
		out.RawString(prefix[1:])
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CSRFToken) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto82(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CSRFToken) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto82(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CSRFToken) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto82(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CSRFToken) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto82(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto83(in *jlexer.Lexer, out *CSRFData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "csrf_token":
			out.Token = string(in.String())
		case "expiration_date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ExpirationDate).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto83(out *jwriter.Writer, in CSRFData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"csrf_token\":"
		out.RawString(prefix[1:])
		out.String(string(in.Token))
	}
	{
		const prefix string = ",\"expiration_date\":"
		out.RawString(prefix)
		out.Raw((in.ExpirationDate).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CSRFData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto83(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CSRFData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto83(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CSRFData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto83(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CSRFData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto83(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto84(in *jlexer.Lexer, out *CSATRatingCheck) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "question_id":
			out.QuestionID = uint64(in.Uint64())
		case "max_rating":
			out.MaxRating = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto84(out *jwriter.Writer, in CSATRatingCheck) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"question_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.QuestionID))
	}
	{
		const prefix string = ",\"max_rating\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.MaxRating))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CSATRatingCheck) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto84(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CSATRatingCheck) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto84(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CSATRatingCheck) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto84(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CSATRatingCheck) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto84(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto85(in *jlexer.Lexer, out *CSATQuestionTypeName) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto85(out *jwriter.Writer, in CSATQuestionTypeName) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CSATQuestionTypeName) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto85(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CSATQuestionTypeName) MarshalEasyJSON(w *jwriter.Writer) {
<<<<<<< HEAD
<<<<<<< HEAD
	easyjson56de76c1EncodeServerInternalPkgDto81(w, v)
	easyjson56de76c1EncodeServerInternalPkgDto84(w, v)
=======
	easyjson56de76c1EncodeServerInternalPkgDto85(w, v)
>>>>>>> e1c327b (EasyJson)
=======
	easyjson56de76c1EncodeServerInternalPkgDto85(w, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CSATQuestionTypeName) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
<<<<<<< HEAD
<<<<<<< HEAD
	easyjson56de76c1DecodeServerInternalPkgDto81(&r, v)
	easyjson56de76c1DecodeServerInternalPkgDto84(&r, v)
=======
	easyjson56de76c1DecodeServerInternalPkgDto85(&r, v)
>>>>>>> e1c327b (EasyJson)
=======
	easyjson56de76c1DecodeServerInternalPkgDto85(&r, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CSATQuestionTypeName) UnmarshalEasyJSON(l *jlexer.Lexer) {
<<<<<<< HEAD
<<<<<<< HEAD
	easyjson56de76c1DecodeServerInternalPkgDto81(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto82(in *jlexer.Lexer, out *CSATQuestionID) {
	easyjson56de76c1DecodeServerInternalPkgDto84(l, v)
=======
	easyjson56de76c1DecodeServerInternalPkgDto85(l, v)
>>>>>>> e1c327b (EasyJson)
}
=======
	easyjson56de76c1DecodeServerInternalPkgDto85(l, v)
}
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
func easyjson56de76c1DecodeServerInternalPkgDto86(in *jlexer.Lexer, out *CSATQuestionID) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Value":
			out.Value = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
<<<<<<< HEAD
<<<<<<< HEAD
func easyjson56de76c1EncodeServerInternalPkgDto82(out *jwriter.Writer, in CSATQuestionID) {
func easyjson56de76c1EncodeServerInternalPkgDto85(out *jwriter.Writer, in CSATQuestionID) {
=======
func easyjson56de76c1EncodeServerInternalPkgDto86(out *jwriter.Writer, in CSATQuestionID) {
>>>>>>> e1c327b (EasyJson)
=======
func easyjson56de76c1EncodeServerInternalPkgDto86(out *jwriter.Writer, in CSATQuestionID) {
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CSATQuestionID) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
<<<<<<< HEAD
<<<<<<< HEAD
	easyjson56de76c1EncodeServerInternalPkgDto82(&w, v)
	easyjson56de76c1EncodeServerInternalPkgDto85(&w, v)
=======
	easyjson56de76c1EncodeServerInternalPkgDto86(&w, v)
>>>>>>> e1c327b (EasyJson)
=======
	easyjson56de76c1EncodeServerInternalPkgDto86(&w, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CSATQuestionID) MarshalEasyJSON(w *jwriter.Writer) {
<<<<<<< HEAD
<<<<<<< HEAD
	easyjson56de76c1EncodeServerInternalPkgDto82(w, v)
=======
=======
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	easyjson56de76c1EncodeServerInternalPkgDto86(w, v)
}
>>>>>>> e1c327b (EasyJson)

func (v *CSATQuestionID) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
<<<<<<< HEAD
<<<<<<< HEAD
	easyjson56de76c1DecodeServerInternalPkgDto82(&r, v)
	easyjson56de76c1DecodeServerInternalPkgDto85(&r, v)
=======
	easyjson56de76c1DecodeServerInternalPkgDto86(&r, v)
>>>>>>> e1c327b (EasyJson)
=======
	easyjson56de76c1DecodeServerInternalPkgDto86(&r, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CSATQuestionID) UnmarshalEasyJSON(l *jlexer.Lexer) {
<<<<<<< HEAD
<<<<<<< HEAD
	easyjson56de76c1DecodeServerInternalPkgDto82(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto83(in *jlexer.Lexer, out *CSATQuestionFull) {
	easyjson56de76c1DecodeServerInternalPkgDto85(l, v)
=======
	easyjson56de76c1DecodeServerInternalPkgDto86(l, v)
>>>>>>> e1c327b (EasyJson)
=======
	easyjson56de76c1DecodeServerInternalPkgDto86(l, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
}
func easyjson56de76c1DecodeServerInternalPkgDto87(in *jlexer.Lexer, out *CSATQuestionFull) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "question_id":
			out.ID = uint64(in.Uint64())
		case "content":
			out.Content = string(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
<<<<<<< HEAD
<<<<<<< HEAD
func easyjson56de76c1EncodeServerInternalPkgDto83(out *jwriter.Writer, in CSATQuestionFull) {
func easyjson56de76c1EncodeServerInternalPkgDto86(out *jwriter.Writer, in CSATQuestionFull) {
=======
func easyjson56de76c1EncodeServerInternalPkgDto87(out *jwriter.Writer, in CSATQuestionFull) {
>>>>>>> e1c327b (EasyJson)
=======
func easyjson56de76c1EncodeServerInternalPkgDto87(out *jwriter.Writer, in CSATQuestionFull) {
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"question_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CSATQuestionFull) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
<<<<<<< HEAD
<<<<<<< HEAD
	easyjson56de76c1EncodeServerInternalPkgDto83(&w, v)
	easyjson56de76c1EncodeServerInternalPkgDto86(&w, v)
=======
	easyjson56de76c1EncodeServerInternalPkgDto87(&w, v)
>>>>>>> e1c327b (EasyJson)
=======
	easyjson56de76c1EncodeServerInternalPkgDto87(&w, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CSATQuestionFull) MarshalEasyJSON(w *jwriter.Writer) {
<<<<<<< HEAD
<<<<<<< HEAD
	easyjson56de76c1EncodeServerInternalPkgDto83(w, v)
	easyjson56de76c1EncodeServerInternalPkgDto86(w, v)
=======
	easyjson56de76c1EncodeServerInternalPkgDto87(w, v)
>>>>>>> e1c327b (EasyJson)
=======
	easyjson56de76c1EncodeServerInternalPkgDto87(w, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CSATQuestionFull) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
<<<<<<< HEAD
<<<<<<< HEAD
	easyjson56de76c1DecodeServerInternalPkgDto83(&r, v)
	easyjson56de76c1DecodeServerInternalPkgDto86(&r, v)
=======
	easyjson56de76c1DecodeServerInternalPkgDto87(&r, v)
>>>>>>> e1c327b (EasyJson)
=======
	easyjson56de76c1DecodeServerInternalPkgDto87(&r, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CSATQuestionFull) UnmarshalEasyJSON(l *jlexer.Lexer) {
<<<<<<< HEAD
<<<<<<< HEAD
	easyjson56de76c1DecodeServerInternalPkgDto83(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto84(in *jlexer.Lexer, out *CSATAnswerFull) {
	easyjson56de76c1DecodeServerInternalPkgDto86(l, v)
=======
	easyjson56de76c1DecodeServerInternalPkgDto87(l, v)
>>>>>>> e1c327b (EasyJson)
=======
	easyjson56de76c1DecodeServerInternalPkgDto87(l, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
}
func easyjson56de76c1DecodeServerInternalPkgDto88(in *jlexer.Lexer, out *CSATAnswerFull) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "answer_id":
			out.ID = uint64(in.Uint64())
		case "rating":
			out.Content = string(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
<<<<<<< HEAD
<<<<<<< HEAD
func easyjson56de76c1EncodeServerInternalPkgDto84(out *jwriter.Writer, in CSATAnswerFull) {
func easyjson56de76c1EncodeServerInternalPkgDto87(out *jwriter.Writer, in CSATAnswerFull) {
=======
func easyjson56de76c1EncodeServerInternalPkgDto88(out *jwriter.Writer, in CSATAnswerFull) {
>>>>>>> e1c327b (EasyJson)
=======
func easyjson56de76c1EncodeServerInternalPkgDto88(out *jwriter.Writer, in CSATAnswerFull) {
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"answer_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CSATAnswerFull) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
<<<<<<< HEAD
<<<<<<< HEAD
	easyjson56de76c1EncodeServerInternalPkgDto84(&w, v)
	easyjson56de76c1EncodeServerInternalPkgDto87(&w, v)
=======
	easyjson56de76c1EncodeServerInternalPkgDto88(&w, v)
>>>>>>> e1c327b (EasyJson)
=======
	easyjson56de76c1EncodeServerInternalPkgDto88(&w, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CSATAnswerFull) MarshalEasyJSON(w *jwriter.Writer) {
<<<<<<< HEAD
<<<<<<< HEAD
	easyjson56de76c1EncodeServerInternalPkgDto84(w, v)
	easyjson56de76c1EncodeServerInternalPkgDto87(w, v)
=======
	easyjson56de76c1EncodeServerInternalPkgDto88(w, v)
>>>>>>> e1c327b (EasyJson)
=======
	easyjson56de76c1EncodeServerInternalPkgDto88(w, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CSATAnswerFull) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
<<<<<<< HEAD
<<<<<<< HEAD
	easyjson56de76c1DecodeServerInternalPkgDto84(&r, v)
=======
=======
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	easyjson56de76c1DecodeServerInternalPkgDto88(&r, v)
	return r.Error()
>>>>>>> e1c327b (EasyJson)
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CSATAnswerFull) UnmarshalEasyJSON(l *jlexer.Lexer) {
<<<<<<< HEAD
<<<<<<< HEAD
	easyjson56de76c1DecodeServerInternalPkgDto84(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto85(in *jlexer.Lexer, out *BoardReturn) {
	easyjson56de76c1DecodeServerInternalPkgDto87(l, v)
=======
	easyjson56de76c1DecodeServerInternalPkgDto88(l, v)
>>>>>>> e1c327b (EasyJson)
=======
	easyjson56de76c1DecodeServerInternalPkgDto88(l, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
}
func easyjson56de76c1DecodeServerInternalPkgDto89(in *jlexer.Lexer, out *BoardReturn) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "WorkspaceID":
			out.WorkspaceID = uint64(in.Uint64())
		case "id":
			out.ID = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "thumbnail_url":
			if in.IsNull() {
				in.Skip()
				out.ThumbnailURL = nil
			} else {
				if out.ThumbnailURL == nil {
					out.ThumbnailURL = new(string)
				}
				*out.ThumbnailURL = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
<<<<<<< HEAD
<<<<<<< HEAD
func easyjson56de76c1EncodeServerInternalPkgDto85(out *jwriter.Writer, in BoardReturn) {
func easyjson56de76c1EncodeServerInternalPkgDto88(out *jwriter.Writer, in BoardReturn) {
=======
func easyjson56de76c1EncodeServerInternalPkgDto89(out *jwriter.Writer, in BoardReturn) {
>>>>>>> e1c327b (EasyJson)
=======
func easyjson56de76c1EncodeServerInternalPkgDto89(out *jwriter.Writer, in BoardReturn) {
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"WorkspaceID\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.WorkspaceID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		if in.Description == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Description))
		}
	}
	{
		const prefix string = ",\"thumbnail_url\":"
		out.RawString(prefix)
		if in.ThumbnailURL == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ThumbnailURL))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BoardReturn) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
<<<<<<< HEAD
<<<<<<< HEAD
	easyjson56de76c1EncodeServerInternalPkgDto85(&w, v)
	easyjson56de76c1EncodeServerInternalPkgDto88(&w, v)
=======
	easyjson56de76c1EncodeServerInternalPkgDto89(&w, v)
>>>>>>> e1c327b (EasyJson)
=======
	easyjson56de76c1EncodeServerInternalPkgDto89(&w, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BoardReturn) MarshalEasyJSON(w *jwriter.Writer) {
<<<<<<< HEAD
<<<<<<< HEAD
	easyjson56de76c1EncodeServerInternalPkgDto85(w, v)
	easyjson56de76c1EncodeServerInternalPkgDto88(w, v)
=======
	easyjson56de76c1EncodeServerInternalPkgDto89(w, v)
>>>>>>> e1c327b (EasyJson)
=======
	easyjson56de76c1EncodeServerInternalPkgDto89(w, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BoardReturn) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
<<<<<<< HEAD
<<<<<<< HEAD
	easyjson56de76c1DecodeServerInternalPkgDto85(&r, v)
	easyjson56de76c1DecodeServerInternalPkgDto88(&r, v)
=======
	easyjson56de76c1DecodeServerInternalPkgDto89(&r, v)
>>>>>>> e1c327b (EasyJson)
=======
	easyjson56de76c1DecodeServerInternalPkgDto89(&r, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BoardReturn) UnmarshalEasyJSON(l *jlexer.Lexer) {
<<<<<<< HEAD
<<<<<<< HEAD
	easyjson56de76c1DecodeServerInternalPkgDto85(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto86(in *jlexer.Lexer, out *BoardImageUrlInfo) {
	easyjson56de76c1DecodeServerInternalPkgDto88(l, v)
=======
	easyjson56de76c1DecodeServerInternalPkgDto89(l, v)
>>>>>>> e1c327b (EasyJson)
}
=======
	easyjson56de76c1DecodeServerInternalPkgDto89(l, v)
}
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
func easyjson56de76c1DecodeServerInternalPkgDto90(in *jlexer.Lexer, out *BoardImageUrlInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "board_id":
			out.ID = uint64(in.Uint64())
		case "avatar_url":
			out.Url = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
<<<<<<< HEAD
<<<<<<< HEAD
func easyjson56de76c1EncodeServerInternalPkgDto86(out *jwriter.Writer, in BoardImageUrlInfo) {
func easyjson56de76c1EncodeServerInternalPkgDto89(out *jwriter.Writer, in BoardImageUrlInfo) {
=======
func easyjson56de76c1EncodeServerInternalPkgDto90(out *jwriter.Writer, in BoardImageUrlInfo) {
>>>>>>> e1c327b (EasyJson)
=======
func easyjson56de76c1EncodeServerInternalPkgDto90(out *jwriter.Writer, in BoardImageUrlInfo) {
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"board_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		out.String(string(in.Url))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BoardImageUrlInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
<<<<<<< HEAD
<<<<<<< HEAD
	easyjson56de76c1EncodeServerInternalPkgDto86(&w, v)
	easyjson56de76c1EncodeServerInternalPkgDto89(&w, v)
=======
	easyjson56de76c1EncodeServerInternalPkgDto90(&w, v)
>>>>>>> e1c327b (EasyJson)
=======
	easyjson56de76c1EncodeServerInternalPkgDto90(&w, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BoardImageUrlInfo) MarshalEasyJSON(w *jwriter.Writer) {
<<<<<<< HEAD
<<<<<<< HEAD
	easyjson56de76c1EncodeServerInternalPkgDto86(w, v)
	easyjson56de76c1EncodeServerInternalPkgDto89(w, v)
=======
	easyjson56de76c1EncodeServerInternalPkgDto90(w, v)
>>>>>>> e1c327b (EasyJson)
=======
	easyjson56de76c1EncodeServerInternalPkgDto90(w, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BoardImageUrlInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
<<<<<<< HEAD
<<<<<<< HEAD
	easyjson56de76c1DecodeServerInternalPkgDto86(&r, v)
	easyjson56de76c1DecodeServerInternalPkgDto89(&r, v)
=======
	easyjson56de76c1DecodeServerInternalPkgDto90(&r, v)
>>>>>>> e1c327b (EasyJson)
=======
	easyjson56de76c1DecodeServerInternalPkgDto90(&r, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BoardImageUrlInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
<<<<<<< HEAD
<<<<<<< HEAD
	easyjson56de76c1DecodeServerInternalPkgDto86(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto87(in *jlexer.Lexer, out *BoardID) {
	easyjson56de76c1DecodeServerInternalPkgDto89(l, v)
=======
	easyjson56de76c1DecodeServerInternalPkgDto90(l, v)
>>>>>>> e1c327b (EasyJson)
=======
	easyjson56de76c1DecodeServerInternalPkgDto90(l, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
}
func easyjson56de76c1DecodeServerInternalPkgDto91(in *jlexer.Lexer, out *BoardID) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "board_id":
			out.Value = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
<<<<<<< HEAD
<<<<<<< HEAD
func easyjson56de76c1EncodeServerInternalPkgDto87(out *jwriter.Writer, in BoardID) {
func easyjson56de76c1EncodeServerInternalPkgDto90(out *jwriter.Writer, in BoardID) {
=======
func easyjson56de76c1EncodeServerInternalPkgDto91(out *jwriter.Writer, in BoardID) {
>>>>>>> e1c327b (EasyJson)
=======
func easyjson56de76c1EncodeServerInternalPkgDto91(out *jwriter.Writer, in BoardID) {
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"board_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BoardID) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
<<<<<<< HEAD
<<<<<<< HEAD
	easyjson56de76c1EncodeServerInternalPkgDto87(&w, v)
	easyjson56de76c1EncodeServerInternalPkgDto90(&w, v)
=======
	easyjson56de76c1EncodeServerInternalPkgDto91(&w, v)
>>>>>>> e1c327b (EasyJson)
=======
	easyjson56de76c1EncodeServerInternalPkgDto91(&w, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BoardID) MarshalEasyJSON(w *jwriter.Writer) {
<<<<<<< HEAD
<<<<<<< HEAD
	easyjson56de76c1EncodeServerInternalPkgDto87(w, v)
	easyjson56de76c1EncodeServerInternalPkgDto90(w, v)
=======
	easyjson56de76c1EncodeServerInternalPkgDto91(w, v)
>>>>>>> e1c327b (EasyJson)
=======
	easyjson56de76c1EncodeServerInternalPkgDto91(w, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BoardID) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
<<<<<<< HEAD
<<<<<<< HEAD
	easyjson56de76c1DecodeServerInternalPkgDto87(&r, v)
	easyjson56de76c1DecodeServerInternalPkgDto90(&r, v)
=======
	easyjson56de76c1DecodeServerInternalPkgDto91(&r, v)
>>>>>>> e1c327b (EasyJson)
=======
	easyjson56de76c1DecodeServerInternalPkgDto91(&r, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BoardID) UnmarshalEasyJSON(l *jlexer.Lexer) {
<<<<<<< HEAD
<<<<<<< HEAD
	easyjson56de76c1DecodeServerInternalPkgDto87(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto88(in *jlexer.Lexer, out *BoardHistoryEntry) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			(out.User).UnmarshalEasyJSON(in)
		case "timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateEdited).UnmarshalJSON(data))
			}
		case "actions":
			out.Actions = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto88(out *jwriter.Writer, in BoardHistoryEntry) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix[1:])
		(in.User).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Raw((in.DateEdited).MarshalJSON())
	}
	{
		const prefix string = ",\"actions\":"
		out.RawString(prefix)
		out.String(string(in.Actions))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BoardHistoryEntry) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto88(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BoardHistoryEntry) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto88(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BoardHistoryEntry) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto88(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BoardHistoryEntry) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto88(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto89(in *jlexer.Lexer, out *AvatarRemovalInfo) {
	easyjson56de76c1DecodeServerInternalPkgDto90(l, v)
=======
	easyjson56de76c1DecodeServerInternalPkgDto91(l, v)
>>>>>>> e1c327b (EasyJson)
=======
	easyjson56de76c1DecodeServerInternalPkgDto91(l, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
}
func easyjson56de76c1DecodeServerInternalPkgDto92(in *jlexer.Lexer, out *AvatarRemovalInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = uint64(in.Uint64())
		case "avatar_url":
			out.AvatarUrl = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
<<<<<<< HEAD
<<<<<<< HEAD
func easyjson56de76c1EncodeServerInternalPkgDto89(out *jwriter.Writer, in AvatarRemovalInfo) {
func easyjson56de76c1EncodeServerInternalPkgDto91(out *jwriter.Writer, in AvatarRemovalInfo) {
=======
func easyjson56de76c1EncodeServerInternalPkgDto92(out *jwriter.Writer, in AvatarRemovalInfo) {
>>>>>>> e1c327b (EasyJson)
=======
func easyjson56de76c1EncodeServerInternalPkgDto92(out *jwriter.Writer, in AvatarRemovalInfo) {
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.UserID))
	}
	{
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		out.String(string(in.AvatarUrl))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AvatarRemovalInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
<<<<<<< HEAD
<<<<<<< HEAD
	easyjson56de76c1EncodeServerInternalPkgDto89(&w, v)
	easyjson56de76c1EncodeServerInternalPkgDto91(&w, v)
=======
	easyjson56de76c1EncodeServerInternalPkgDto92(&w, v)
>>>>>>> e1c327b (EasyJson)
=======
	easyjson56de76c1EncodeServerInternalPkgDto92(&w, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AvatarRemovalInfo) MarshalEasyJSON(w *jwriter.Writer) {
<<<<<<< HEAD
<<<<<<< HEAD
	easyjson56de76c1EncodeServerInternalPkgDto89(w, v)
	easyjson56de76c1EncodeServerInternalPkgDto91(w, v)
=======
	easyjson56de76c1EncodeServerInternalPkgDto92(w, v)
>>>>>>> e1c327b (EasyJson)
=======
	easyjson56de76c1EncodeServerInternalPkgDto92(w, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AvatarRemovalInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
<<<<<<< HEAD
<<<<<<< HEAD
	easyjson56de76c1DecodeServerInternalPkgDto89(&r, v)
	easyjson56de76c1DecodeServerInternalPkgDto91(&r, v)
=======
	easyjson56de76c1DecodeServerInternalPkgDto92(&r, v)
>>>>>>> e1c327b (EasyJson)
=======
	easyjson56de76c1DecodeServerInternalPkgDto92(&r, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AvatarRemovalInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
<<<<<<< HEAD
<<<<<<< HEAD
	easyjson56de76c1DecodeServerInternalPkgDto89(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto90(in *jlexer.Lexer, out *AuthInfo) {
	easyjson56de76c1DecodeServerInternalPkgDto91(l, v)
=======
	easyjson56de76c1DecodeServerInternalPkgDto92(l, v)
>>>>>>> e1c327b (EasyJson)
=======
	easyjson56de76c1DecodeServerInternalPkgDto92(l, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
}
func easyjson56de76c1DecodeServerInternalPkgDto93(in *jlexer.Lexer, out *AuthInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
<<<<<<< HEAD
<<<<<<< HEAD
func easyjson56de76c1EncodeServerInternalPkgDto90(out *jwriter.Writer, in AuthInfo) {
func easyjson56de76c1EncodeServerInternalPkgDto92(out *jwriter.Writer, in AuthInfo) {
=======
func easyjson56de76c1EncodeServerInternalPkgDto93(out *jwriter.Writer, in AuthInfo) {
>>>>>>> e1c327b (EasyJson)
=======
func easyjson56de76c1EncodeServerInternalPkgDto93(out *jwriter.Writer, in AuthInfo) {
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuthInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
<<<<<<< HEAD
<<<<<<< HEAD
	easyjson56de76c1EncodeServerInternalPkgDto90(&w, v)
	easyjson56de76c1EncodeServerInternalPkgDto92(&w, v)
=======
	easyjson56de76c1EncodeServerInternalPkgDto93(&w, v)
>>>>>>> e1c327b (EasyJson)
=======
	easyjson56de76c1EncodeServerInternalPkgDto93(&w, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuthInfo) MarshalEasyJSON(w *jwriter.Writer) {
<<<<<<< HEAD
<<<<<<< HEAD
	easyjson56de76c1EncodeServerInternalPkgDto90(w, v)
	easyjson56de76c1EncodeServerInternalPkgDto92(w, v)
=======
	easyjson56de76c1EncodeServerInternalPkgDto93(w, v)
>>>>>>> e1c327b (EasyJson)
=======
	easyjson56de76c1EncodeServerInternalPkgDto93(w, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuthInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
<<<<<<< HEAD
<<<<<<< HEAD
=======
=======
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
	easyjson56de76c1DecodeServerInternalPkgDto93(&r, v)
	return r.Error()
>>>>>>> e1c327b (EasyJson)
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuthInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
<<<<<<< HEAD
<<<<<<< HEAD
	easyjson56de76c1DecodeServerInternalPkgDto90(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto91(in *jlexer.Lexer, out *AuthDTO) {
	easyjson56de76c1DecodeServerInternalPkgDto92(l, v)
=======
	easyjson56de76c1DecodeServerInternalPkgDto93(l, v)
>>>>>>> e1c327b (EasyJson)
=======
	easyjson56de76c1DecodeServerInternalPkgDto93(l, v)
>>>>>>> 8983b0fee76c7ffad015e06782db5b3c135f236c
}
func easyjson56de76c1DecodeServerInternalPkgDto94(in *jlexer.Lexer, out *AuthDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "VerifiedAuthInfo":
			easyjson56de76c1Decode(in, &out.VerifiedAuthInfo)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto94(out *jwriter.Writer, in AuthDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"VerifiedAuthInfo\":"
		out.RawString(prefix[1:])
		easyjson56de76c1Encode(out, in.VerifiedAuthInfo)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuthDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto94(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuthDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto94(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuthDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto94(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuthDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto94(l, v)
}
func easyjson56de76c1Decode(in *jlexer.Lexer, out *struct{ UserID uint64 }) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UserID":
			out.UserID = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1Encode(out *jwriter.Writer, in struct{ UserID uint64 }) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UserID\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.UserID))
	}
	out.RawByte('}')
}
func easyjson56de76c1DecodeServerInternalPkgDto95(in *jlexer.Lexer, out *AttachedFileInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "task_id":
			out.TaskID = uint64(in.Uint64())
		case "original_name":
			out.OriginalName = string(in.String())
		case "file_path":
			out.FilePath = string(in.String())
		case "date_created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateCreated).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto95(out *jwriter.Writer, in AttachedFileInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"task_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TaskID))
	}
	{
		const prefix string = ",\"original_name\":"
		out.RawString(prefix)
		out.String(string(in.OriginalName))
	}
	{
		const prefix string = ",\"file_path\":"
		out.RawString(prefix)
		out.String(string(in.FilePath))
	}
	{
		const prefix string = ",\"date_created\":"
		out.RawString(prefix)
		out.Raw((in.DateCreated).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AttachedFileInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto95(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AttachedFileInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto95(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AttachedFileInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto95(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AttachedFileInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto95(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto96(in *jlexer.Lexer, out *AllWorkspaces) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "yourWorkspaces":
			if in.IsNull() {
				in.Skip()
				out.OwnedWorkspaces = nil
			} else {
				in.Delim('[')
				if out.OwnedWorkspaces == nil {
					if !in.IsDelim(']') {
						out.OwnedWorkspaces = make([]UserOwnedWorkspaceInfo, 0, 1)
					} else {
						out.OwnedWorkspaces = []UserOwnedWorkspaceInfo{}
					}
				} else {
					out.OwnedWorkspaces = (out.OwnedWorkspaces)[:0]
				}
				for !in.IsDelim(']') {
					var v79 UserOwnedWorkspaceInfo
					(v79).UnmarshalEasyJSON(in)
					out.OwnedWorkspaces = append(out.OwnedWorkspaces, v79)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "guestWorkspaces":
			if in.IsNull() {
				in.Skip()
				out.GuestWorkspaces = nil
			} else {
				in.Delim('[')
				if out.GuestWorkspaces == nil {
					if !in.IsDelim(']') {
						out.GuestWorkspaces = make([]UserGuestWorkspaceInfo, 0, 0)
					} else {
						out.GuestWorkspaces = []UserGuestWorkspaceInfo{}
					}
				} else {
					out.GuestWorkspaces = (out.GuestWorkspaces)[:0]
				}
				for !in.IsDelim(']') {
					var v80 UserGuestWorkspaceInfo
					(v80).UnmarshalEasyJSON(in)
					out.GuestWorkspaces = append(out.GuestWorkspaces, v80)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto96(out *jwriter.Writer, in AllWorkspaces) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"yourWorkspaces\":"
		out.RawString(prefix[1:])
		if in.OwnedWorkspaces == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v81, v82 := range in.OwnedWorkspaces {
				if v81 > 0 {
					out.RawByte(',')
				}
				(v82).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"guestWorkspaces\":"
		out.RawString(prefix)
		if in.GuestWorkspaces == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v83, v84 := range in.GuestWorkspaces {
				if v83 > 0 {
					out.RawByte(',')
				}
				(v84).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AllWorkspaces) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto96(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AllWorkspaces) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto96(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AllWorkspaces) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto96(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AllWorkspaces) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto96(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto97(in *jlexer.Lexer, out *AddTaskUserInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = uint64(in.Uint64())
		case "task_id":
			out.TaskID = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto97(out *jwriter.Writer, in AddTaskUserInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.UserID))
	}
	{
		const prefix string = ",\"task_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.TaskID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddTaskUserInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto97(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddTaskUserInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto97(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddTaskUserInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto97(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddTaskUserInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto97(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto98(in *jlexer.Lexer, out *AddBoardUserRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_email":
			out.UserEmail = string(in.String())
		case "board_id":
			out.BoardID = uint64(in.Uint64())
		case "workspace_id":
			out.WorkspaceID = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto98(out *jwriter.Writer, in AddBoardUserRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_email\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserEmail))
	}
	{
		const prefix string = ",\"board_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.BoardID))
	}
	{
		const prefix string = ",\"workspace_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.WorkspaceID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddBoardUserRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto98(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddBoardUserRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto98(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddBoardUserRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto98(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddBoardUserRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto98(l, v)
}
func easyjson56de76c1DecodeServerInternalPkgDto99(in *jlexer.Lexer, out *AddBoardUserInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = uint64(in.Uint64())
		case "workspace_id":
			out.WorkspaceID = uint64(in.Uint64())
		case "board_id":
			out.BoardID = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeServerInternalPkgDto99(out *jwriter.Writer, in AddBoardUserInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.UserID))
	}
	{
		const prefix string = ",\"workspace_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.WorkspaceID))
	}
	{
		const prefix string = ",\"board_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.BoardID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddBoardUserInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeServerInternalPkgDto99(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddBoardUserInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeServerInternalPkgDto99(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddBoardUserInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeServerInternalPkgDto99(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddBoardUserInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeServerInternalPkgDto99(l, v)
}
