// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package microservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CSATQuestionServiceClient is the client API for CSATQuestionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CSATQuestionServiceClient interface {
	CheckRating(ctx context.Context, in *NewCSATAnswerInfo, opts ...grpc.CallOption) (*Error, error)
	Create(ctx context.Context, in *NewCSATQuestionInfo, opts ...grpc.CallOption) (*CreateReturn, error)
	Update(ctx context.Context, in *UpdatedCSATQuestion, opts ...grpc.CallOption) (*Error, error)
	Delete(ctx context.Context, in *CSATQuestionID, opts ...grpc.CallOption) (*Error, error)
}

type cSATQuestionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCSATQuestionServiceClient(cc grpc.ClientConnInterface) CSATQuestionServiceClient {
	return &cSATQuestionServiceClient{cc}
}

func (c *cSATQuestionServiceClient) CheckRating(ctx context.Context, in *NewCSATAnswerInfo, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/service.CSATQuestionService/CheckRating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSATQuestionServiceClient) Create(ctx context.Context, in *NewCSATQuestionInfo, opts ...grpc.CallOption) (*CreateReturn, error) {
	out := new(CreateReturn)
	err := c.cc.Invoke(ctx, "/service.CSATQuestionService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSATQuestionServiceClient) Update(ctx context.Context, in *UpdatedCSATQuestion, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/service.CSATQuestionService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSATQuestionServiceClient) Delete(ctx context.Context, in *CSATQuestionID, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/service.CSATQuestionService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CSATQuestionServiceServer is the server API for CSATQuestionService service.
// All implementations must embed UnimplementedCSATQuestionServiceServer
// for forward compatibility
type CSATQuestionServiceServer interface {
	CheckRating(context.Context, *NewCSATAnswerInfo) (*Error, error)
	Create(context.Context, *NewCSATQuestionInfo) (*CreateReturn, error)
	Update(context.Context, *UpdatedCSATQuestion) (*Error, error)
	Delete(context.Context, *CSATQuestionID) (*Error, error)
	mustEmbedUnimplementedCSATQuestionServiceServer()
}

// UnimplementedCSATQuestionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCSATQuestionServiceServer struct {
}

func (UnimplementedCSATQuestionServiceServer) CheckRating(context.Context, *NewCSATAnswerInfo) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRating not implemented")
}
func (UnimplementedCSATQuestionServiceServer) Create(context.Context, *NewCSATQuestionInfo) (*CreateReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCSATQuestionServiceServer) Update(context.Context, *UpdatedCSATQuestion) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCSATQuestionServiceServer) Delete(context.Context, *CSATQuestionID) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCSATQuestionServiceServer) mustEmbedUnimplementedCSATQuestionServiceServer() {}

// UnsafeCSATQuestionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CSATQuestionServiceServer will
// result in compilation errors.
type UnsafeCSATQuestionServiceServer interface {
	mustEmbedUnimplementedCSATQuestionServiceServer()
}

func RegisterCSATQuestionServiceServer(s grpc.ServiceRegistrar, srv CSATQuestionServiceServer) {
	s.RegisterService(&CSATQuestionService_ServiceDesc, srv)
}

func _CSATQuestionService_CheckRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewCSATAnswerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSATQuestionServiceServer).CheckRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.CSATQuestionService/CheckRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSATQuestionServiceServer).CheckRating(ctx, req.(*NewCSATAnswerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSATQuestionService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewCSATQuestionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSATQuestionServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.CSATQuestionService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSATQuestionServiceServer).Create(ctx, req.(*NewCSATQuestionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSATQuestionService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatedCSATQuestion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSATQuestionServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.CSATQuestionService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSATQuestionServiceServer).Update(ctx, req.(*UpdatedCSATQuestion))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSATQuestionService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSATQuestionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSATQuestionServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.CSATQuestionService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSATQuestionServiceServer).Delete(ctx, req.(*CSATQuestionID))
	}
	return interceptor(ctx, in, info, handler)
}

// CSATQuestionService_ServiceDesc is the grpc.ServiceDesc for CSATQuestionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CSATQuestionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.CSATQuestionService",
	HandlerType: (*CSATQuestionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckRating",
			Handler:    _CSATQuestionService_CheckRating_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _CSATQuestionService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CSATQuestionService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CSATQuestionService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "csat_question.proto",
}
